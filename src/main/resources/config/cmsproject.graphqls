scalar Date


enum Status {
    ACTIVE
    DEACTIVE
}

enum LecStatusEnum{
	ACTIVE
    DEACTIVE
    CANCELLED
}

enum AttendanceStatusEnum{
	PRESENT
    ABSENT
}

enum TypeOfOwnerShip{
    COMPANYOWNED
    CONTRACTUAL
}

enum Disability{
    YES
    NO
}
enum SectionEnum {
    A
    B
    C
    D
}

enum SubTypeEnum {
    COMMON
    ELECTIVE
}

enum AdmissionStatusEnum{
    INPROCESS
    DECLINED
    ACCEPTED
}

enum CourseEnum {
    BTECH
    MTECH
    BBA
    MBA
}

enum EnquiryStatus{
    FOLLOWUP
    DECLINED
    CONVERTED
}

enum ModeOfEnquiry{
    INPERSON
    TELEPHONE
    EMAIL
}


enum TypeOfCollege{
    PRIVATE
    PUBLIC
}

enum NameOfBank {
    HDFC
    SBI
    ICICI
    ANDHRABANK
}

enum BatchEnum{
	FIRSTYEAR
    SECONDYEAR
    THIRDYEAR
    FOURTHYEAR
    FIFTHYEAR
}

enum StudentTypeEnum{
    REGULAR
    STAFF_CONCESSION
    BENEFITS
    SCHOLARSHIP
    OTHER_BENEFITS
}

enum Frequency {
    WEEKLY
    MONTHLY
    QUARTERLY
    HALFYEARLY
    ANNUALLY
}

enum ModeOfPayment {
    CARD
    CASH
    NETBANKING
    CHEQUE
    DEMANDDRAFT
}
enum StatusEnum{
     AVAILABLE
	 RESERVED
}

enum InvoicePaymentStatus {
	PAID
	UNPAID
	CANCELED
}
enum SemesterEnum{
    SEMESTER1
    SEMESTER2
    SEMESTER3
    SEMESTER4
    SEMESTER5
    SEMESTER6
    SEMESTER7
    SEMESTER8
}

enum GradeType{
    PERCENTAGE
    GRADE
}

enum RouteFrequency {
    MORNINGPICKUP
    AFTERNOONDROPANDPICKUP
    AFTERNOONDROP
    EVENINGDROP
}

enum TypeOfInsurance {
    LIABILITY
    COLLISION
    COMPREHENSIVE
}

type Query {

   getVehicleList: [CmsVehicleVo]
   getInsuranceList: [CmsInsuranceVo]
   getContractList: [CmsContractVo]
   getTransportRouteList: [CmsTransportVo]

  authorizedSignatory(id: Int!): AuthorizedSignatory!
  authorizedSignatories:[AuthorizedSignatory!]!

  adminAttendance(id: Long!):AdminAttendance!
  adminAttendances: [AdminAttendance!]!

  academicExamSetting(id: Long!):AcademicExamSetting!
  academicExamSettings: [AcademicExamSetting!]!

  bankAccount(id: Long!): BankAccounts!
  bankAccounts: [BankAccounts!]!

  college(id: Long!): College!
  colleges: [College!]!

  branch(id: Long!): Branch!
  branches: [Branch!]!

  batch(id: Long!): Batch!
  batches: [Batch!]!

  academicYear(id: Long!): AcademicYear!
  academicYears: [AcademicYear!]!

  department(id: Long!): Department!
  departments: [Department!]!

  attendanceMaster(id: Long!): AttendanceMaster!
  attendanceMasters: [AttendanceMaster!]!

  lecture(id: Long!): Lecture!
  lectures: [Lecture!]!

  typeOfGrading(id: Int!): TypeOfGrading!
  typeOfGradings:[TypeOfGrading!]!

  holiday(id: Long!): Holiday!
  holidays: [Holiday!]!

  section(id: Long!): Section!
  sections: [Section!]!

  student(id: Long!): CmsStudentVo!
  students: [Student!]!

  studentAttendance(id: Long!): StudentAttendance!
  studentAttendances: [StudentAttendance!]!


  subject(id: Long!): Subject!
  subjects: [Subject!]!

  academicHistory(id:Long!): AcademicHistory!
  academicHistories: [AcademicHistory!]!

  admissionApplication(id: Long!): AdmissionApplication!
  admissionApplications:[AdmissionApplication!]!

  admissionEnquiry(id: Long!): AdmissionEnquiry!
  admissionEnquiries:[AdmissionEnquiry!]!

  teach(id: Long!): Teach!
  teaches: [Teach!]!

  teacher(id: Long!): Teacher!
  teachers: [Teacher!]!

  feeCategory(id: Long!): FeeCategory!
  feeCategories: [FeeCategory!]!

  feeDetail(id: Long!): FeeDetails!
  feeDetails: [FeeDetails!]!

  facility(id: Long!): Facility!
  facilities: [Facility!]!

  competitiveExam (id: Long!): CompetitiveExam!
  competitiveExams: [CompetitiveExam!]!

  document (id: Long!): Documents!
  documents: [Documents!]!

  dueDate(id:Long!):DueDate!
  dueDates:[DueDate!]!

  lateFee(id:Long!):LateFee!
  lateFees:[LateFee!]!

  paymentRemainder(id:Long!):PaymentRemainder!
  paymentRemainders:[PaymentRemainder!]!

  term (id: Long!): Term!
  terms: [Term!]!

  city (id: Long!): City!
  cities: [City!]!

  state (id: Long!): Long!
  states: [State!]!

  country (id: Long!): Long!
  countries: [Country!]!

  invoice(id:Long!):Invoice!
  invoices:[Invoice!]!



  acExamSetting(id:Long!):AcExamSetting!
  acExamSettings:[AcExamSetting!]!
  findTypeOfGradingOnNextId(groupvalue:Long!):[TypeOfGrading!]!
 findExamValuesOnGroupvalue(countvalue: Long!):[AcademicExamSetting!]!


  studentExamReport(id: Long!): StudentExamReport!
  studentExamReports: [StudentExamReport!]!

    library(id: Long!): Library
    libraries: [Library!]!

    book(id: Long!): Book
    	books: [Book!]!





    employee(id: Long!): Employee!
    employees:[Employee!]!


  getAcademicSubjects(input: AcademicSubjectQueryPayload!): [Subject!]!

    searchStudent(departmentId:Long, batchId:Long, sectionId:Long, branchId:Long,  gender: Gender, studentType: StudentTypeEnum, studentName: String): [Student!]!
    searchEmployee(employeeId:Long, vehicleId:Long, employeeName:String): [CmsEmployeeVo!]!
    searchBook (bookTitle:String,author:String,batchId:Long,subjectId:Long):[Library!]!
    searchVehicle(transportRouteId:Long,VehicleId:Long,vehicleNumber:String): [CmsVehicleVo!]!
    getAllBranches(branchName:String, collegeId:Long): [Branch!]!
    getCollegeById(collegeId:Long): College!
    getBranchById(branchId:Long): Branch!
    getCollegeByName(shortName:String): College!
    getDepartmentById(departmentId:Long): Department!
    getSectionById(sectionId:Long): Section!
    getBatchById(batchId:Long): Batch!



  getTotalInvoice(collegeId:Long, branchId:Long!, academicYearId:Long! ): Long!
  getTotalPaidInvoice(collegeId:Long, branchId:Long!, academicYearId:Long! ): Long!
  getTotalUnPaidInvoice(collegeId:Long, branchId:Long!, academicYearId:Long! ): Long!
  getTotalCanceledInvoice(collegeId:Long, branchId:Long!, academicYearId:Long! ): Long!
  getInvoiceData(collegeId:String, branchId:String, academicYearId:String): CmsInvoice
  searchInvoiceOnType(invoiceType:String,  branchId:Long, academicYearId:Long ): [CmsInvoice!]!

    getTotalAdmissions(branchId:Long): Long!
    getTotalFollowup(branchId:Long ): Long!
    getTotalDeclined(branchId:Long ): Long!
    getTotalConverted(branchId:Long): Long!
    getAdmissionData(branchId:String): CmsAdmissionEnquiryVo

    getTotalReceived(academicyearId:Long): Long!
    getTotalInprocess(academicyearId:Long ): Long!
    getTotalDecline(academicyearId:Long ): Long!
    getTotalAccepted(academicyearId:Long): Long!
    getAdmissionApplicationData(academicyearId:String): CmsAdmissionApplicationVo



    createStudentAttendanceCache(branchId:String , academicYearId:String , teacherId:String, lectureDate:String ): StudentAttendanceCache!
    createStudentFilterDataCache(collegeId:Long, academicYearId:Long): StudentFilterDataCache!
    createStudentAttendanceCacheForAdmin(branchId:String, departmentId:String , academicYearId:String, lectureDate:String ): StudentAttendanceCache!
    createFeeDataCache: FeeDataCache!
    createEmployeeDataCache: EmployeeDataCache!
    createAdmissionDataCache: AdmissionDataCache!
    createVehicleDataCache: VehicleDataCache!
    createExamFilterDataCache(branchId: Long, academicYearId: Long): ExamFilterDataCache!
    createFeeSetupDataCache(branchId:Long, academicYearId:Long): FeeSetupDataCache!
    createLibraryFilterDataCache(collegeId:String!, academicYearId:String!):LibraryFilterDataCache!

}

type VehicleDataCache{
   transportRoute: [CmsTransportVo]
   insurance: [CmsInsuranceVo]
   vehicle: [CmsVehicleVo]
}

type FeeSetupDataCache {
	departments: [Department]
	batches: [Batch]
	studentTypes: [CmsStudentTypeVo]
	genders: [CmsGenderVo]
	feeDetails: [CmsFeeDetails]
	feeCategory: [CmsFeeCategory]
	facility: [CmsFacility]
	transportRoute: [TransportRoute]
}

type CmsFacility {
	id: Long
	name: String
	status: Status
    startDate: Date
    endDate: Date
    suspandStartDate: Date
    suspandEndDate: Date
	academicYear: AcademicYear
    branch: Branch
	strStartDate: String
	strEndDate: String
	strSuspandStartDate: String
	strSuspandEndDate: String
}

type CmsFeeCategory{
	id: Long
    categoryName: String
    description: String
    status: Status
    createdBy:	  String
    createdOn:	  Date
    updatedBy:	  String
    updatedOn:	  Date
    startDate:	  Date
    endDate:	  Date
    strCreatedOn: String
    strUpdatedOn: String
    strStartDate: String
    strEndDate:	  String
    branchId:	  Long
}

type CmsFeeDetails {
    id: Long
    feeParticularsName: String
    feeParticularDesc:	String
    studentType: StudentTypeEnum
    gender: Gender
    amount: Float
    status: Status
    createdBy: String
    createdOn: Date
    updatedBy: String
    updatedOn: Date
    startDate: Date
    endDate:   Date
    feeCategory: FeeCategory
    batchId: Long
    facility: Facility
    transportRoute: TransportRoute
    departmentId: Long

    strCreatedOn: String
    strUpdatedOn: String
    strStartDate: String
    strEndDate:	  String
}

type ExamFilterDataCache {
    branches: [Branch]
	departments: [Department]
	batches: [Batch]
	sections: [Section]
	semesters: [CmsSemesterVo]
	subjects: [Subject]
	academicExamSettings : [AcademicExamSetting]

}

type StudentFilterDataCache {
	branches: [Branch]
	departments: [Department]
	batches: [Batch]
	sections: [Section]
	studentTypes: [CmsStudentTypeVo]
	genders: [CmsGenderVo]
}

type FeeDataCache {
	colleges: [College]
	branches: [Branch]
}
type CmsTypeOfInsuranceVo{
     id: Int
	description: String
}

type CmsRouteFrequency{
     id: Int
	description: String
}

type CmsTypeOfOwnershipVo{
     id: Int
	description: String
}

type EmployeeDataCache{
    employees: [Employee]
    vehicles: [Vehicle]
}
type AdmissionDataCache {
    branches: [Branch]
    departments: [Department]
    states: [State]
    cities: [City]
    batches: [Batch]
    courses: [CmsCourseEnumVo]
}

type AcExamSetting{
    id:Long
    examName: String
    action: String
    sbjct: String
    examDate: Date
    departmnt: String
    bctch: String
    brnch: String
    sectn: String
    st: String
    ed: String
    subExamDate: String
    countvalue: Long
   }

type TypeOfGradingPojo{
    minMarks:Long!
    maxMarks: String!
    grades: String!
    next: String!
   }


type CmsStudentTypeVo{
	id: Int
	description: String
}

type CmsGenderVo{
	id: Int
	description: String
}

type CmsCourseEnumVo{
    id: Int
    description: String
}

type CmsInvoice {
	totalInvoice: Long!
	totalPaidInvoice: Long!
	totalUnPaidInvoice: Long!
	totalCanceledInvoice: Long!
	id: Long
    invoiceNumber: String
    amountPaid: Long
    paymentDate: Date
    nextPaymentDate: Date
    outStandingAmount: Long
    modeOfPayment: ModeOfPayment
    chequeNumber: Long
    demandDraftNumber: Long
    onlineTxnRefNumber: String
    paymentStatus: InvoicePaymentStatus
    comments: String
    updatedBy: String
    updatedOn: Date
    feeCategory: FeeCategory
    feeDetails: FeeDetails
    dueDate: DueDate
    paymentRemainder: PaymentRemainder
    collegeId: Long
    branchId: Long
    student: Student
    academicYearId: Long
    strPaymentDate: String
    strNextPaymentDate: String
    strUpdatedOn: String

}

type CmsVehicleVo {
    id: Long
    vehicleNumber: String
    vehicleType: String
    capacity: Long
    ownerShip: String
    dateOfRegistration:Date
    yearOfManufacturing: String
    manufacturingCompany: String
    model:  String
    chasisNo:  String
    rcNo:  String
    contactNumber:  String
    status:Status
    strDateOfRegistration: String
    dateOfInsurance: Date
    strDateOfInsurance: String
    validTill: Date
    strValidTill: String
    startDate: Date
    endDate: Date
    strStartDate: String
    strEndDate: String
    transportRouteId: Long
    collegeId: Long
    branchId: Long
    contractId: Long
    insuranceId: Long
    employeeId: Long
    transportRoute: TransportRoute
    cmsInsuranceVo: CmsInsuranceVo
    exitCode: Long
    exitDescription: String
    dataList: [CmsVehicleVo]
}
type CmsInsuranceVo {
     id: Long
     insuranceCompany: String
     typeOfInsurance: TypeOfInsurance
     dateOfInsurance: Date
     validTill: Date
     strDateOfInsurance: String
     strValidTill: String
	 exitCode: Long
     exitDescription: String
     dataList: [CmsInsuranceVo]

}


type CmsTransportVo {
    id: Long
    routeName: String
    routeDetails: String
    routeMapUrl: String
    noOfStops: Int
    routeFrequency: RouteFrequency
    exitCode: Long
    exitDescription: String
    dataList: [CmsTransportVo]
}


type CmsEmployeeVo{
     id:Long
     employeeName:String
     designation:String
     joiningDate:Date
     jobEndDate:Date
     resignationDate:Date
     resignationAcceptanceDate:Date
     aadharNo:String
     panNo:String
     passportNo:String
     primaryContactNo:String
     secondaryContactNo:String
     employeeFatherName:String
     employeeMotherName:String
     primaryAddress:String
     secondaryAddress:String
     employeeAddress:String
     personalMailId:String
     officialMailId:String
     disability:Disability
     drivingLicenceNo:String
     drivingLicenceValidity:Date
     gender:String
     typeOfEmployment:String
     managerId:Long
     status:Status
     maritalStatus:MaritalStatus
     strjoiningDate:String
     strjobEndDate:String
     strresignationDate:String
     strresignationAcceptanceDate:String
     strdrivingLicenceValidity:String
     transportRoute: TransportRoute
     branch: Branch
     vehicle: Vehicle
     branchId:Long
     transportRouteId:Long
     vehicleId:Long

}

type CmsLibrary {
    library: Library
    bookTitle:String
    dateOfIssue:Date
    dueDate:DueDate
    student:Student
    noOfCopies:String
    copiesAvailable:String
}
type CmsAdmissionEnquiryVo {
	  totalAdmissions: Long!
      totalFollowup: Long!
      totalDeclined: Long!
      totalConverted: Long!
      id: Long
      studentName: String
      studentMiddleName: String
      studentLastName: String
      fatherName: String
      fatherMiddleName: String
      fatherLastName: String
      motherName: String
      motherMiddleName: String
      motherLastName: String
      contactNumber: String
      alternateMobileNumber: String
      dateOfBirth: Date
      email: String
      sex:  Gender
      comments: String
      courseApplyingFor: CourseEnum
      highestQualification: String
      modeOfEnquiry: ModeOfEnquiry
      status: EnquiryStatus
      description: String
      enquiryDate: Date
      updatedOn: Date
      updatedBy: String
      branch: Branch
      batch: Batch
      state: State
      city: City
      country: Country
      department: Department
      strDateOfBirth:String
      strEnquiryDate:String
      strUpdatedOn:String

}

type CmsAdmissionApplicationVo {
     totalReceived : Long!
      totalInprocess : Long!
      totalDeclined : Long!
      totalAccepted : Long!
      id: Long
      admissionStatus: AdmissionStatusEnum
      studentName: String
      studentMiddleName: String
      studentLastName: String
      fatherName: String
      fatherMiddleName: String
      fatherLastName: String
      motherName: String
      motherMiddleName: String
      motherLastName: String
      contactNumber: String
      alternateMobileNumber: String
      dateOfBirth: Date
      email: String
      sex: Gender
      comments: String
      applicationId: Int
      uploadPhoto: String
      course: CourseEnum
      admissionDate: Date
      admissionEnquiry: AdmissionEnquiry
      academicHistory: AcademicHistory
      documents: Documents
      branch: Branch
      batch: Batch
      state: State
      city: City
      country: Country
      department: Department
      academicyear: AcademicYear
      strDateOfBirth: String
      strAdmissionDate: String
}

type StudentAttendanceCache{
	departments: [Department]
	batches: [Batch]
	subjects: [Subject]
	sections: [Section]
	lectures: [CmsLectureVo]
	semesters: [CmsSemesterVo]
	teaches: [Teach]
	attendanceMasters: [AttendanceMaster]
	terms: [CmsTermVo]
}
type CmsTermVo {
	id: Long
    termsDesc: String
    startDate: Date
    endDate: Date
    termStatus: Status
    academicyear: AcademicYear
    strStartDate: String
    strEndDate: String
}
type CmsLectureVo{
	id: Long!
	lecDate: Date
    lastUpdatedBy: String
    lastUpdatedOn: Date
    startTime: String
	endTime: String
	attendancemaster: AttendanceMaster
	strLecDate: String
}

type CmsSemesterVo{
	id: Int
	description: String
}

type InvoiceFilterProcessor{
	totalInvoice: Long
	totalPaidInvoice: Long
	totalUnPaidInvoice: Long
	totalCanceledInvoice: Long
}

type AdmissionEnquiryProcessor{
   totalAdmissions: Long
   totalFollowup: Long
   totalDeclined: Long
   totalConverted: Long
}

type TypeOfGrading{
    id: Long!
    minMarks: Int!
    maxMarks: Int!
    grades: String!
    groupvalue: Long!
}

type City{
    id: Long!
    cityName: String!
    cityCode: String!
    stdCode: String!
    state: State!
}

type State{
    id: Long!
    stateName: String!
    divisionType: String!
    stateCode: String!
    country: Country!
}

type CompetitiveExam{
    id: Long!
    testName: String!
    testScore: Int!
    enrollmentNo: Long!
    rank: Long!
    student: Student!
 }

type Documents{
    id: Long!
    documentName: String!
    documentFilePath: String!
    student: Student!
    vehicle: Vehicle!
    employee: Employee!
    contract: Contract!
 }




type FeeCategory{
    id: Long!
    categoryName: String!
    description: String!
    status: Status
    createdBy: String
    createdOn: Date
    updatedBy: String
    updatedOn: Date
    startDate: Date
    endDate: Date
    branchId: Long
   }

type Facility{
     id: Long
     name: String
     status: Status
     startDate: Date
     endDate: Date
     suspandStartDate: Date
     suspandEndDate: Date
     academicYear: AcademicYear!
     branch: Branch!
 }

type StudentExamReport{
    id: Long
    marksObtained: Int
    comments: String
    gOp: Int
    student: Student
    academicExamSetting: AcademicExamSetting
    typeOfGrading: TypeOfGrading
    academicyearId: Long
    batchId: Long
    departmentId: Long
    subjectId: Long
    sectionId: Long
}

  type TransportRoute{
    id: Long
    routeName: String
    routeDetails: String
    routeMapUrl: String
    noOfStops: Int
    routeFrequency: RouteFrequency
  }

type  Library{
    id:Long!
    bookTitle:String!
    author:String!
    bookNo: Long!
    noOfCopies :Long!
    additionalInfo:String!
    uniqueNo:Long!
    batch: Batch!
    subject:Subject!
}
 type Book{
          id:Long!
     	 issueDate:Date
     	 dueDate:Date
     	 receivedDate:Date
     	 noOfCopiesAvailable:Int
     	 status:StatusEnum
     	 student:Student
     	 library:Library
     }


  type FeeDetails{
       id: Long!
       feeParticularsName: String!
       feeParticularDesc: String!
       studentType: StudentTypeEnum
       gender: Gender
       amount: Long
       status: Status
       createdBy: String
       createdOn: Date
       updatedBy: String
       updatedOn: Date
       startDate: Date
       endDate: Date
       feeCategory: FeeCategory
       batchId: Long
       facility: Facility
       transportRoute: TransportRoute
       departmentId: Long

      }

type Country{
    id: Long!
    countryName: String!
    countryCode: String!
    isdCode: String!
}



type DueDate{
    id:Long!
    paymentMethod: String!
    installments:Int
    dayDesc:String
    paymentDay:Int
    frequency:Frequency
    collegeId:Long
    branchId:Long
}
type LateFee{
    id: Long!
    isAutoLateFee: String!
    lateFeeDays: Int
    chargeType: String
    fixedCharges: Long
    percentCharges: String
    lateFeeFrequency: String
	lateFeeRepeatDays: Int
    collegeId: Long
    branchId: Long

}
type PaymentRemainder{
    id: Long!
    isAutoRemainder: String
    isFirstPaymentRemainder: String
    firstPaymentRemainderDays: Int
    isSecondPaymentRemainder: String
    secondPaymentRemainderDays: Int
    isOverDuePaymentRemainder: String
    overDuePaymentRemainderAfterDueDateOrUntilPaid: String
    overDuePaymentRemainderDays: Int
    isRemainderRecipients: String
    remainderRecipients: String
    collegeId: Long
    branchId: Long
}


type AuthorizedSignatory {
    id: Long!
    signatoryName: String!
    signatoryFatherName: String!
    signatoryDesignation: String!
    address1: String!
    address2: String!
    address3: String!
    address4: String!
    address5: String!
    email: String!
    panCardNumber: String!
    branch: Branch
    college: College!
}
type BankAccounts {
    id: Long!
    nameOfBank: NameOfBank!
    accountNumber: String!
    typeOfAccount: String!
    ifscCode: String!
    branchAddress: String!
    corporateId: String!
    branch: Branch
    college: College!
}
type College{
    id: Long!
    shortName: String!
    logoPath: String!
    backgroundImagePath: String!
    instructionInformation: String!
}
type Branch{
    id: Long!
    branchName: String!
    address1: String!
    address2: String
    branchHead: String!
    college: College!
    city: City!
    state: State!
}

type Contract{
    id: Long
    vendorName: String
    typeOfOwnerShip: TypeOfOwnerShip
    durationOfContract: String
    startDate: Date
    endDate: Date
}

type Employee{
    id: Long
    employeeName: String
    designation: String
    joiningDate: Date
    jobEndDate: Date
    resignationDate: Date
    resignationAcceptanceDate: Date
    aadharNo: String
    panNo: String
    passportNo: String
    primaryContactNo: String
    secondaryContactNo: String
    employeeFatherName: String
    employeeMotherName: String
    primaryAddress: String
    secondaryAddress: String
    employeeAddress: String
    personalMailId: String
    officialMailId: String
    disability: String
    drivingLicenceNo: String
    drivingLicenceValidity: Date
    gender: String
	typeOfEmployment: String
	managerId: Long
	status: String
	maritalStatus: String
	branch: Branch
	transportRoute: TransportRoute
	vehicle: Vehicle
	staffType: String
}

enum MaritalStatus{
	MARRIED
	SINGLE
	DIVORCED
	WIDOWED
}


type Batch{
	id: Long!
    batch: BatchEnum!
    department: Department!
}
type Teach{
	id: Long!
    desc: String!
    teacher: Teacher!
    subject: Subject!
}

type AttendanceMaster{
	id: Long!
    desc: String!
    teach: Teach!
    section: Section
    batch: Batch!
}
type Lecture{
	id: Long!
	lecDate: Date!
    lastUpdatedBy: String!
    lastUpdatedOn: Date!
    startTime: String!
	endTime: String!
	attendancemaster: AttendanceMaster!
}
type Holiday{
    id: Long!
    holidayDesc: String!
    holidayDate: Date!
    holidayStatus: Status!
    academicyear: AcademicYear!
}
type AcademicYear{
    id: Long!
    year: String!
    startDate: Date!
    endDate: Date!
    status: Status!
}

type AdmissionApplication{
     id: Long
     admissionStatus: AdmissionStatusEnum
     studentName: String
     studentMiddleName: String
     studentLastName: String
     fatherName: String
     fatherMiddleName: String
     fatherLastName: String
     motherName: String
     motherMiddleName: String
     motherLastName: String
     contactNumber: String
     alternateMobileNumber: String
     dateOfBirth: Date
     email: String
     sex: Gender
     comments: String
     applicationId: Int
     uploadPhoto: String
     course:CourseEnum
     admissionDate: Date
     admissionEnquiry: AdmissionEnquiry
     academicHistory: AcademicHistory
     documents: Documents
     branch: Branch
     batch: Batch
     state: State
     city: City
     country: Country
     department: Department
     academicyear: AcademicYear
     status: Status

}

type AcademicHistory{
    id:Long!
    qualification:String!
    yearOfPassing:String!
    institution:String!
    university:String!
    enrollmentNo:Long!
    score:Long!
    percentage:Int!
    student:Student!
}

type AdmissionEnquiry {
    id: Long!
    studentName: String!
    studentMiddleName: String!
    studentLastName: String!
    fatherName: String!
    fatherMiddleName: String!
    fatherLastName: String!
    motherName: String!
    motherMiddleName: String!
    motherLastName: String!
    contactNumber: String!
    alternateMobileNumber: String!
    dateOfBirth: Date!
    email: String!
    sex:  Gender!
    comments: String!
    courseApplyingFor: CourseEnum
    highestQualification: String!
    modeOfEnquiry: ModeOfEnquiry!
    status: EnquiryStatus!
    description: String!
    enquiryDate: Date!
    updatedOn: Date!
     updatedBy: String!
    branch: Branch!
    batch: Batch!
    state: State!
    city: City!
    country: Country!
    department: Department!
}

type LegalEntity{
    id: Long!
    logoPath: String
    logoFileName: String
    logoFile: String
    legalNameOfTheCollege:String!
    typeOfCollege: TypeOfCollege!
    dateOfIncorporation:Date!
    registeredOfficeAddress1:String!
    registeredOfficeAddress2:String!
    registeredOfficeAddress3:String!
    registeredOfficeAddress4:String!
    registeredOfficeAddress5:String!
    collegeIdentificationNumber:String!
    pan:String!
    tan:String!
    tanCircleNumber:String!
    citTdsLocation:String!
    formSignatory:String!
    pfNumber:String!
    pfRegistrationDate: Date!
    pfSignatory: String!
    esiNumber:Long!
    esiRegistrationDate: Date!
    esiSignatory: String!
    ptNumber:Long!
    ptRegistrationDate:Date!
    ptSignatory:String!
    branch: Branch
    college: College!
    city: City!
    state: State!
}

type Section{
    id: Long!
    section: SectionEnum!
    batch: Batch!
}

type AcademicExamSetting{
    id: Long
    examName: String
    semester: SemesterEnum
    examDate: Date
    startTime: String
    endTime: String
    gradeType: GradeType
    total: Int
    passing: Int
    actions: String
    groupvalue: Long
    countvalue: Long
    branchId: Long
    subjectId: Long
    departmentId: Long
    academicyearId: Long
    sectionId: Long
    batchId: Long
    typeOfGrading: TypeOfGrading

}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum Bloodgroup {
    APOSITIVE
	ANEGATIVE
	ABPOSITIVE
	ABNEGATIVE
	OPOSITIVE
	ONEGATIVE
	BPOSITIVE
	BNEGATIVE
}

enum Caste {
    GENERAL
	OBC
	SC
	ST
}

 enum RelationWithStudentEnum {
    FATHER
    MOTHER
    GUARDIAN
}

enum Religion {
    HINDU
    MUSLIM
    CHRISTIAN
}


type Student {
	id: Long
	studentName: String
	studentMiddleName: String
	studentLastName: String
	fatherName: String
	fatherMiddleName: String
	fatherLastName: String
	motherName: String
	motherMiddleName: String
	motherLastName: String
	studentAadharNo: String
	studentPanNo: String
	studentSocialSecurityNo: String
	studentTaxReferenceNo: String
	studentBplNo: String
	studentDrivingLicenseNo: String
	studentPassportNo: String
	dateOfBirth: Date
	placeOfBirth: String
	religion: Religion
	caste: Caste
	subCaste: String
	age: Int
	sex: Gender
	studentLocalAddress: String
	studentPermanentAddress: String
	city: String
	state: String
	country: String
	pinCode: String
	studentPrimaryCellNumber: String
	studentAlternateCellNumber: String
	studentLandLinePhoneNumber: String
	studentPrimaryEmailId: String
	studentAlternateEmailId: String
	relationWithStudent: RelationWithStudentEnum
	emergencyContactName: String
	emergencyContactMiddleName: String
	emergencyContactLastName: String
	emergencyContactCellNumber: String
	emergencyContactLandLinePhoneNumber: String
	emergencyContactEmailId: String
	studentImagePath: String
	admissionNo: String
	enrollmentNo: String
	rollNo: String
	studentType: StudentTypeEnum
	fatherCellNumber: String
	fatherEmailId: String
	fatherOccupation: String
	fatherOfficeEmailId: String
	fatherOfficeAddress: String
	fatherOfficeCellNumber: String
	fatherOfficeLandLinePhoneNumber: String
	fatherAadharNo: String
	fatherPanNo: String
	fatherSocialSecurityNo: String
	fatherTaxReferenceNo: String
	fatherBplNo: String
	fatherDrivingLicenseNo: String
	fatherPassportNo: String
	fatherImagePath: String
	motherCellNumber: String
	motherEmailId: String
	motherOccupation: String
	motherOfficeEmailId: String
	motherOfficeAddress: String
	motherOfficeCellNumber: String
	motherOfficeLandLinePhoneNumber: String
	motherAadharNo: String
	motherPanNo: String
	motherSocialSecurityNo: String
	motherTaxReferenceNo: String
	motherBplNo: String
	motherDrivingLicenseNo: String
	motherPassportNo: String
	motherImagePath: String
	guardianName: String
	guardianMiddleName: String
	guardianLastName: String
	guardianAddress: String
	guardianCellNumber: String
	guardianLandLinePhoneNumber: String
	guardianEmailId: String
	guardianOccupation: String
	guardianOfficeEmailId: String
	guardianOfficeAddress: String
	guardianOfficeCellNumber: String
	guardianOfficeLandLinePhoneNumber: String
	guardianImagePath: String
	isGuardianSponsorAgency: String
	sponsorAgencyName: String
	sponsorAgencyRegistrationNo: String
	sponsorAgencyAddress: String
	sponsorAgencyCellNumber: String
	sponsorAgencyLandLineNumber: String
	sponsorAgencyEmailId: String
	sponsorAgencyAppointeeName: String
	sponsorAgencyAppointeeDesignation: String
	sponsorAgencyAppointeeCellNumber: String
	sponsorAgencyAppointeeLandLineNumber: String
	sponsorAgencyAppointeeEmailId: String
	sponsorAgencyAppointeeOfficeAddress: String
	isPhysicallyChallenged: String
	detailsOfDisability: String
	disabilityCertificateNo: String
	disabilityCertificateIssueAuthority: String
	disabilityCertificateIssueDate: Date
	percentagOfDisability: Int
	bloodGroup: Bloodgroup
	vaccinationDetails: String
	otherMedicalDetails: String
	status: Status
	createdBy: String
	createdOn: Date
	updatedBy: String
	updatedOn: Date
	comments: String
	departmentId: Long
	batchId: Long
	sectionId: Long
	branchId: Long
}

type CmsStudentVo {
    id: Long
	studentName: String
	studentMiddleName: String
	studentLastName: String
	fatherName: String
	fatherMiddleName: String
	fatherLastName: String
	motherName: String
	motherMiddleName: String
	motherLastName: String
	studentAadharNo: String
	studentPanNo: String
	studentSocialSecurityNo: String
	studentTaxReferenceNo: String
	studentBplNo: String
	studentDrivingLicenseNo: String
	studentPassportNo: String
	dateOfBirth: Date
	placeOfBirth: String
	religion: Religion
	caste: Caste
	subCaste: String
	age: Int
	sex: Gender
	studentLocalAddress: String
	studentPermanentAddress: String
	city: String
	state: String
	country: String
	pinCode: String
	studentPrimaryCellNumber: String
	studentAlternateCellNumber: String
	studentLandLinePhoneNumber: String
	studentPrimaryEmailId: String
	studentAlternateEmailId: String
	relationWithStudent: RelationWithStudentEnum
	emergencyContactName: String
	emergencyContactMiddleName: String
	emergencyContactLastName: String
	emergencyContactCellNumber: String
	emergencyContactLandLinePhoneNumber: String
	emergencyContactEmailId: String
	studentImagePath: String
	admissionNo: String
	enrollmentNo: String
	rollNo: String
	studentType: StudentTypeEnum
	fatherCellNumber: String
	fatherEmailId: String
	fatherOccupation: String
	fatherOfficeEmailId: String
	fatherOfficeAddress: String
	fatherOfficeCellNumber: String
	fatherOfficeLandLinePhoneNumber: String
	fatherAadharNo: String
	fatherPanNo: String
	fatherSocialSecurityNo: String
	fatherTaxReferenceNo: String
	fatherBplNo: String
	fatherDrivingLicenseNo: String
	fatherPassportNo: String
	fatherImagePath: String
	motherCellNumber: String
	motherEmailId: String
	motherOccupation: String
	motherOfficeEmailId: String
	motherOfficeAddress: String
	motherOfficeCellNumber: String
	motherOfficeLandLinePhoneNumber: String
	motherAadharNo: String
	motherPanNo: String
	motherSocialSecurityNo: String
	motherTaxReferenceNo: String
	motherBplNo: String
	motherDrivingLicenseNo: String
	motherPassportNo: String
	motherImagePath: String
	guardianName: String
	guardianMiddleName: String
	guardianLastName: String
	guardianAddress: String
	guardianCellNumber: String
	guardianLandLinePhoneNumber: String
	guardianEmailId: String
	guardianOccupation: String
	guardianOfficeEmailId: String
	guardianOfficeAddress: String
	guardianOfficeCellNumber: String
	guardianOfficeLandLinePhoneNumber: String
	guardianImagePath: String
	isGuardianSponsorAgency: String
	sponsorAgencyName: String
	sponsorAgencyRegistrationNo: String
	sponsorAgencyAddress: String
	sponsorAgencyCellNumber: String
	sponsorAgencyLandLineNumber: String
	sponsorAgencyEmailId: String
	sponsorAgencyAppointeeName: String
	sponsorAgencyAppointeeDesignation: String
	sponsorAgencyAppointeeCellNumber: String
	sponsorAgencyAppointeeLandLineNumber: String
	sponsorAgencyAppointeeEmailId: String
	sponsorAgencyAppointeeOfficeAddress: String
	isPhysicallyChallenged: String
	detailsOfDisability: String
	disabilityCertificateNo: String
	disabilityCertificateIssueAuthority: String
	disabilityCertificateIssueDate: Date
	percentagOfDisability: Int
	bloodGroup: Bloodgroup
	vaccinationDetails: String
	otherMedicalDetails: String
	status: Status
	createdBy: String
	createdOn: Date
	updatedBy: String
	updatedOn: Date
	comments: String
	departmentId: Long
	batchId: Long
	sectionId: Long
	branchId: Long
	strCreatedOn: String
	strUpdatedOn: String
	strDisabilityCertificateIssueDate: String
	strDateOfBirth: String
}


type StudentAttendance {
    id: Long!
    attendanceStatus: AttendanceStatusEnum!
    comments: String!
    student: Student!
    lecture: Lecture!
}
type Subject {
 	id: Long
 	subjectType: String
 	subjectCode: String
 	subjectDesc: String
    status: String
 	department: Department
 	batch: Batch
}

enum StaffType {
    TEACHING
    NONTEACHING
     GUEST
}

type Teacher{
     id: Long
     teacherName: String
     teacherMiddleName: String
     teacherLastName: String
     fatherName: String
     fatherMiddleName: String
     fatherLastName: String
     spouseName: String
     spouseMiddleName: String
     spouseLastName: String
     motherName: String
     motherMiddleName: String
     motherLastName: String
     aadharNo: String
     dateOfBirth: Date!
     placeOfBirth: String
     religion: String
     caste: String
     subCaste: String
     age: Long
     sex: String
     bloodGroup: String
     address: String
     town: String
     state: String
     country: String
     pinCode: String
     teacherContactNumber: String
     alternateContactNumber: String
     teacherEmailAddress: String
     alternateEmailAddress: String
     relationWithStaff: String
     emergencyContactName: String
     emergencyContactMiddleName: String
     emergencyContactLastName: String
     emergencyContactNo: String
     emergencyContactEmailAddress: String
     uploadPhoto: String
     employeeId: Long
     designation: String
     staffType: String
     status: String
     branch: Branch
   	 department: Department
}
type Term{
    id: Long!
    termsDesc: String!
    startDate: Date!
    endDate: Date!
    termStatus: Status!
    academicyear: AcademicYear!
}

type DailyAttendanceVo {
	studentId: String
	studentName: String
	currentDateStatus: String
	previousOneDayStatus: String
	previousTwoDayStatus: String
	previousThreeDayStatus: String
	comments: String
	student: Student
}
type DailyExamVo{
    subjectId: String
    subjectDesc: String
    examDate: String
    day: String
    startTime: String
    endTime: String
    total: String
    passing: String
    academicExamSetting:  AcademicExamSetting

}

input StudentAttendanceFilterInput {
	branchId: String!
	departmentId: String!
	batchId: String!
	sectionId: String!
	subjectId: String!
	attendanceDate: String!
	studentId: String
	studentName: String
	lectureId: String!
	teacherId: String
	academicYearId: String
	termId: String
}




type AcademicSubjectVo{
    subjectCode: String!
    subjectType: String!
    subjectDesc: String!
    status: String!
    id: Int!
	departmentId: Int!
	batchId: Int!
	teacherId: Int!
}

input AcademicSubjectMutationPayload {
    subjectData: [String!]!
}

input AcademicSubjectQueryPayload{
	departmentId: Int!
    batchId: Int!
    branchId: Int!
}
type Invoice {
    id : Long!
    invoiceNumber:String!
    amountPaid:Long!
    paymentDate:Date!
    nextPaymentDate:Date!
    outStandingAmount:Long!
    modeOfPayment:ModeOfPayment
    chequeNumber:Long!
    demandDraftNumber:Long!
    onlineTxnRefNumber:String!
    paymentStatus:InvoicePaymentStatus!
    comments:String!
    updatedBy:String!
    updatedOn:Date!
    feeCategory:FeeCategory!
    feeDetails:FeeDetails!
    dueDate:DueDate!
    paymentRemainder:PaymentRemainder!
    collegeId:Long!
    branchId:Long!
    student:Student!
    academicYearId:Long!
}


type Mutation {

   addVehicle(input: AddVehicleInput): AddVehiclePayload

       addContract(input: AddContractInput): AddContractPayload

      addInsurance(input: AddInsuranceInput): AddInsurancePayload


   addTransportRoute(input: AddTransportRouteInput): AddTransportRoutePayload
   addAuthorizedSignatory(input: AddAuthorizedSignatoryInput!): AddAuthorizedSignatoryPayload!
   updateAuthorizedSignatory(input: UpdateAuthorizedSignatoryInput!): UpdateAuthorizedSignatoryPayload!
   removeAuthorizedSignatory(input: RemoveAuthorizedSignatoryInput!): RemoveAuthorizedSignatoryPayload!

   addBankAccounts(input: AddBankAccountsInput!): AddBankAccountsPayload!
   updateBankAccounts(input: UpdateBankAccountsInput!): UpdateBankAccountsPayload!
   removeBankAccounts(input: RemoveBankAccountsInput!): RemoveBankAccountsPayload!

   addCollege(input: AddCollegeInput!): AddCollegePayload!
   updateCollege(input: UpdateCollegeInput!): UpdateCollegePayload!
   removeCollege(input: RemoveCollegeInput!): RemoveCollegePayload!



    addEmployee(input: AddEmployeeInput!): AddEmployeePayload!
    updateEmployee(input: UpdateEmployeeInput!): UpdateEmployeePayload!
    removeEmployee(input: RemoveEmployeeInput!): RemoveEmployeePayload!

   addBranch(input: AddBranchInput!): AddBranchPayload!
   updateBranch(input: UpdateBranchInput!): UpdateBranchPayload!
   removeBranch(input: RemoveBranchInput!): RemoveBranchPayload!

   addAcademicExamSetting(input: [AddAcademicExamSettingInput!]!): AddAcademicExamSettingPayload!
   updateAcademicExamSetting(input: UpdateAcademicExamSettingInput!): UpdateAcademicExamSettingPayload!
   removeAcademicExamSetting(input: RemoveAcademicExamSettingInput!): RemoveAcademicExamSettingPayload!

   addBatch(input: AddBatchInput!): AddBatchPayload!
   updateBatch(input: UpdateBatchInput!): UpdateBatchPayload!
   removeBatch(input: RemoveBatchInput!): RemoveBatchPayload!

   addAcademicYear(input: AddAcademicYearInput!): AddAcademicYearPayload!
   updateAcademicYear(input: UpdateAcademicYearInput!): UpdateAcademicYearPayload!
   removeAcademicYear(input: RemoveAcademicYearInput!): RemoveAcademicYearPayload!

   addDepartment(input: AddDepartmentInput!): AddDepartmentPayload!
   updateDepartment(input: UpdateDepartmentInput!): UpdateDepartmentPayload!
   removeDepartment(input: RemoveDepartmentInput!): RemoveDepartmentPayload!

   addAttendanceMaster(input: AddAttendanceMasterInput!): AddAttendanceMasterPayload!
   updateAttendanceMaster(input: UpdateAttendanceMasterInput!): UpdateAttendanceMasterPayload!
   removeAttendanceMaster(input: RemoveAttendanceMasterInput!): RemoveAttendanceMasterPayload!

   addLecture(input: AddLectureInput!): AddLecturePayload!
   updateLecture(input: UpdateLectureInput!): UpdateLecturePayload!
   removeLecture(input: RemoveLectureInput!): RemoveLecturePayload!

   addHoliday(input: AddHolidayInput!): AddHolidayPayload!
   updateHoliday(input: UpdateHolidayInput!): UpdateHolidayPayload!
   removeHoliday(input: RemoveHolidayInput!): RemoveHolidayPayload!

   addLegalEntity(input: AddLegalEntityInput!): AddLegalEntityPayload!
   updateLegalEntity(input: UpdateLegalEntityInput!): UpdateLegalEntityPayload!
   removeLegalEntity(input: RemoveLegalEntityInput!): RemoveLegalEntityPayload!

   addSection(input: AddSectionInput!): AddSectionPayload!
   updateSection(input: UpdateSectionInput!): UpdateSectionPayload!
   removeSection(input: RemoveSectionInput!): RemoveSectionPayload!

   saveStudent(input: StudentInput): StudentPayload

   addStudentAttendance(input: AddStudentAttendanceInput!): AddStudentAttendancePayload!
   updateStudentAttendance(input: UpdateStudentAttendanceInput!): UpdateStudentAttendancePayload!
   removeStudentAttendance(input: RemoveStudentAttendanceInput!): RemoveStudentAttendancePayload!

   addSubject(input: AddSubjectInput!): AddSubjectPayload!
   updateSubject(input: UpdateSubjectInput!): UpdateSubjectPayload!
   removeSubject(input: RemoveSubjectInput!): RemoveSubjectPayload!

   addTeach(input: AddTeachInput!): AddTeachPayload!
   updateTeach(input: UpdateTeachInput!): UpdateTeachPayload!
   removeTeach(input: RemoveTeachInput!): RemoveTeachPayload!

   addTeacher(input: AddTeacherInput!): AddTeacherPayload!
   updateTeacher(input: UpdateTeacherInput!): UpdateTeacherPayload!
   removeTeacher(input: RemoveTeacherInput!): RemoveTeacherPayload!

   addTerm(input: AddTermInput!): AddTermPayload!
   updateTerm(input: UpdateTermInput!): UpdateTermPayload!
   removeTerm(input: RemoveTermInput!): RemoveTermPayload!

   addCity(input: AddCityInput!): AddCityPayload!
   updateCity(input: UpdateCityInput!): UpdateCityPayload!
   removeCity(input: RemoveCityInput!): RemoveCityPayload!

   addState(input: AddStateInput!): AddStatePayload!
   updateState(input: UpdateStateInput!): UpdateStatePayload!
   removeState(input: RemoveStateInput!): RemoveStatePayload!

   addCountry(input: AddCountryInput!): AddCountryPayload!
   updateCountry(input: UpdateCountryInput!): UpdateCountryPayload!
   removeCountry(input: RemoveCountryInput!): RemoveCountryPayload!

   addFeeCategory(input: AddFeeCategoryInput!): [CmsFeeCategory!]!
   updateFeeCategory(input: UpdateFeeCategoryInput!): [CmsFeeCategory!]!
   removeFeeCategory(input: RemoveFeeCategoryInput!): RemoveFeeCategoryPayload!

   addFacility(input: AddFacilityInput!): AddFacilityPayload!
   updateFacility(input: UpdateFacilityInput!): UpdateFacilityPayload!
   removeFacility(input: RemoveFacilityInput!): RemoveFacilityPayload!

    addFeeDetails(input: AddFeeDetailsInput!): CmsFeeDetails!
    updateFeeDetails(input: UpdateFeeDetailsInput!): UpdateFeeDetailsPayload!
    removeFeeDetails(input: RemoveFeeDetailsInput!): RemoveFeeDetailsPayload!

    addAdmissionPersonaldetails(input: AddAdmissionPersonalDetailsInput): CmsAdmissionApplicationVo!
    updateAdmissionPersonaldetails(input: UpdateAdmissionPersonalDetailsInput): CmsAdmissionApplicationVo!
    removeAdmissionPersonalDetails(input: RemoveAdmissionPersonalDetailsInput!): RemoveAdmissionPersonalDetailsPayload!


   updateStudentAttendanceData(input: [StudentAttendanceUpdateFilter!]!): QueryResult!
   updateAcademicExamSettingData(input: [AcademicExamSettingUpdateFilter!]!): QueryResult!

   addAcademicSubjects(input: AcademicSubjectMutationPayload!): QueryResult!
   updateAcademicSubjects(input: AcademicSubjectMutationPayload!): QueryResult!

   addLectures(input: LectureScheduleInput!, filter: LectureScheduleFilter!): QueryResult!
   updateLectures(input: LectureScheduleInput!, filter: LectureScheduleFilter!): QueryResult!

    addDueDate(input:AddDueDateInput!):AddDueDatePayload!
    updateDueDate(input:UpdateDueDateInput!):UpdateDueDatePayload!
    removeDueDate(input:RemoveDueDateInput!):RemoveDueDatePayload!

    addStudentExamReport(input: AddStudentExamReportInput!): AddStudentExamReportPayload!
    updateStudentExamReport(input: UpdateStudentExamReportInput!): UpdateStudentExamReportPayload!
    removeStudentExamReport(input: RemoveStudentExamReportInput!): RemoveStudentExamReportPayload!

    addLateFee(input:AddLateFeeInput!):AddLateFeePayload!
    updateLateFee(input:UpdateLateFeeInput!):UpdateLateFeePayload!
    removeLateFee(input:RemoveLateFeeInput!):RemoveLateFeePayload!


    addPaymentRemainder(input:AddPaymentRemainderInput!):AddPaymentRemainderPayload!
    updatePaymentRemainder(input:UpdatePaymentRemainderInput!):UpdatePaymentRemainderPayload!
    removePaymentRemainder(input:RemovePaymentRemainderInput!):RemovePaymentRemainderPayload!

    addInvoice(input:AddInvoiceInput!):AddInvoicePayload!
    updateInvoice(input:UpdateInvoiceInput!):UpdateInvoicePayload!
    removeInvoice(input:RemoveInvoiceInput!):RemoveInvoicePayload!
    searchInvoice(invoiceNumber:String, studentId:Long, collegeId:Long, branchId:Long, academicYearId:Long ): [CmsInvoice!]!
    getTotalInvoice(collegeId:Long, branchId:Long!, academicYearId:Long! ): Long!
    getTotalPaidInvoice(collegeId:Long, branchId:Long!, academicYearId:Long! ): Long!
    getTotalUnPaidInvoice(collegeId:Long, branchId:Long!, academicYearId:Long! ): Long!
    getTotalCanceledInvoice(collegeId:Long, branchId:Long!, academicYearId:Long! ): Long!

     getTotalAdmissions(branchId:Long ): Long!
     getTotalFollowup(branchId:Long ): Long!
     getTotalDeclined(branchId:Long ): Long!
     getTotalConverted(branchId:Long): Long!
     searchAdmissionOnType(admissionEnquiryType:String branchId:Long): [CmsAdmissionEnquiryVo!]!
     admissionEnquiryList(branchId:Long ): [CmsAdmissionEnquiryVo!]!

    addCompetitiveExam(input:AddCompetitiveExamInput!):AddCompetitiveExamPayload!
    updateCompetitiveExam(input:UpdateCompetitiveExamInput!):UpdateCompetitiveExamPayload!
    removeCompetitiveExam(input:RemoveCompetitiveExamInput!):RemoveCompetitiveExamPayload!

    addTypeOfGrading(input: [AddTypeOfGradingInput]!): AddTypeOfGradingPayload!
    updateTypeOfGrading(input: UpdateTypeOfGradingInput!): UpdateTypeOfGradingPayload!
    removeTypeOfGrading(input: RemoveTypeOfGradingInput!): RemoveTypeOfGradingPayload!

    addDocuments(input:AddDocumentsInput!):AddDocumentsPayload!
    updateDocuments(input:UpdateDocumentsInput!):UpdateDocumentsPayload!
    removeDocuments(input:RemoveDocumentsInput!):RemoveDocumentsPayload!

    addAdmissionApplication(input: AddAdmissionApplicationInput!): AddAdmissionApplicationPayload!
    updateAdmissionApplication(input: UpdateAdmissionApplicationInput!): UpdateAdmissionApplicationPayload!
    removeAdmissionApplication(input: RemoveAdmissionApplicationInput!): RemoveAdmissionApplicationPayload!
    getTotalReceived(academicyearId:Long ): Long!
    getTotalInprocess(academicyearId:Long ): Long!
    getTotalDecline(academicyearId:Long ): Long!
    getTotalAccepted(academicyearId:Long): Long!
    searchAdmissionApplicationOnType(admissionApplicationType:String academicyearId:Long): [CmsAdmissionApplicationVo!]!

    addAcademicHistory(input: AddAcademicHistoryInput!): AddAcademicHistoryPayload!
    updateAcademicHistory(input: UpdateAcademicHistoryInput!): UpdateAcademicHistoryPayload!
    removeAcademicHistory(input: RemoveAcademicHistoryInput!): RemoveAcademicHistoryPayload!

    addAdmissionEnquiry(input: AddAdmissionEnquiryInput!): AddAdmissionEnquiryPayload!
    updateAdmissionEnquiry(input: UpdateAdmissionEnquiryInput!): UpdateAdmissionEnquiryPayload!
    removeAdmissionEnquiry(input: RemoveAdmissionEnquiryInput!): RemoveAdmissionEnquiryPayload!

    addAdminAttendance(input:AddAdminAttendanceInput!):AddAdminAttendancePayload!
    updateAdminAttendance(input:UpdateAdminAttendanceInput!):UpdateAdminAttendancePayload!
    removeAdminAttendance(input:RemoveAdminAttendanceInput!):RemoveAdminAttendancePayload!

    addLibrary(input:AddLibraryInput!):AddLibraryPayload!
    updateLibrary(input:UpdateLibraryInput!):UpdateLibraryPayload!
    removeLibrary(input:RemoveLibraryInput!):RemoveLibraryPayload!
    searchLib(bookTitle:String,author:String, batchId:Long, subjectId:Long):[CmsLibrary!]!

     addBook(input: [AddBookInput!]!): [CmsBook]!
     updateBook(input: UpdateBookInput!): [CmsBook!]!
     removeBook(input:RemoveBookInput!):RemoveBookPayload!



	getDailyStudentAttendanceData(filter: StudentAttendanceFilterInput!): [DailyAttendanceVo!]!
	getStudentList(filter: StudentListFilterInput!): [CmsStudentVo]!
	getBookList(filter: LibraryListFilterInput!): [CmsLibraryVo]!
	getEmployeeList(filter: EmployeeListFilterInput!): [CmsEmployeeVo]!
	getVehicleList(filter: VehicleListFilterInput!): [CmsVehicleVo]!
	getSubjectList(filter: ExamListFilterInput!): [AcademicExamSetting]!
	getSubjectandStudents(filter: ExamReportFilterInput!): [StudentExamReport]!
	getStudentAttendanceDataForAdmin(filter: StudentAttendanceFilterInput!): [DailyAttendanceVo!]!
	getExamDataForAdmin(filter: ExamListFilterInput!): [DailyExamVo!]!
	saveDueDatePaymentRemLateFee(inputd: UpdateDueDateInput, inputp: UpdatePaymentRemainderInput, inputl: UpdateLateFeeInput): QueryResult!
	getFeeSettingData(branchId: Long): CmsFeeSettingsVo!
	getFeeSettingDueDateData(branchId: Long, paymentType: String): CmsFeeSettingsVo!

}
type LibraryFilterDataCache{
    branches: [Branch]
	departments: [Department]
	batches: [Batch]
	sections: [Section]
	semesters: [CmsSemesterVo]
	subjects: [Subject]
	academicExamSettings : [AcademicExamSetting]
	libraries: [Library]
	students: [Student]
	books: [CmsBook]
}
type CmsFeeCategory {
	 id: Long
	 categoryName: String
     description: String
     status: Status
     createdBy: String
     createdOn: Date
     updatedBy: String
     updatedOn: Date
     startDate: Date
     endDate: Date
     branchId: Long
     strCreatedOn: String
     strUpdatedOn: String
     strStartDate: String
     strEndDate: String
}

type CmsBook {
	 id: Long
     status: StatusEnum
     issueDate: Date
     dueDate: Date
     receivedDate: Date
     studentId: Long
     libraryId: Long
     strIssueDate: String
     strDueDate: String
     strRecDate: String
    noOfCopiesAvailable: Int
     student: Student
     library: Library
}

type CmsContractVo {
     id: Long
     vendorName: String
     typeOfOwnerShip: TypeOfOwnerShip
     durationOfContract: String
     startDate: Date
     endDate: Date
     strStartDate: String
     strEndDate: String
     exitCode: Long
     exitDescription: String
     dataList: [CmsContractVo]
}


type CmsLibraryVo {
       id: Long
       bookTitle: String
       author: String
       noOfCopies: Long
       bookNo: Long
       additionalInfo: String
       uniqueNo: Long
       batch: Batch
       subject: Subject
       }

type CmsFeeSettingsVo {
	lateFeeId: Long
	isAutoLateFee: String
	lateFeeDays: Int
	chargeType: String
	fixedCharges: Long
	percentCharges: String
	lateFeeFrequency: String
	lateFeeRepeatDays: Int

	prId: Long
    isAutoRemainder: String
    isFirstPaymentRemainder: String
    firstPaymentRemainderDays: Int
    isSecondPaymentRemainder: String
    secondPaymentRemainderDays: Int
    isOverDuePaymentRemainder: String
    overDuePaymentRemainderAfterDueDateOrUntilPaid: String
    overDuePaymentRemainderDays: Int
    isRemainderRecipients: String
    remainderRecipients: String

    dueDateId: Long
    paymentMethod: String
    installments: Int
    paymentDay: Int
    frequency: Frequency
}

input StudentListFilterInput {
	branchId: String
	departmentId: String
	batchId: String
	sectionId: String
	gender: String
	studentType: String
}

input LibraryListFilterInput {
	batchId: String
	subjectId: String
}

input EmployeeListFilterInput {
   employeeId: String
   vehicleId: String
}

input VehicleListFilterInput {
   transportRouteId: String
   vehicleId: String
}

input ExamListFilterInput {
    branchId:String!
	  departmentId:String!
	  batchId: String!
	  sectionId: String!
	  subjectId: String!
	  subjectDesc: String!
      semester: String!
      examName: String!

}

input ExamReportFilterInput {
	batchId: String!
    academicExamSettingId: String!
    departmentId: String!
    sectionId: String!
    subjectId: String!
}
input AddDocumentsInput{
    documentName: String!
    documentFilePath: String!
    studentId: Long!
    vehicleId: Long!
    employeeId: Long!
    contractId: Long!
}

type AddDocumentsPayload {
    documents: Documents!
}
input UpdateDocumentsInput {
    id: Long!
    documentName: String!
    documentFilePath: String!
    studentId: Long!
    vehicleId: Long!
    employeeId: Long!
    contractId: Long!
}
type UpdateDocumentsPayload {
documents: Documents!
}
input RemoveDocumentsInput {
documentsId: Long!
}
type RemoveDocumentsPayload {
 documents: [ Documents!]!
}

input AddContractInput{
    id: Long
        vendorName: String
        typeOfOwnerShip: TypeOfOwnerShip
        durationOfContract: String
        startDate: Date
        endDate: Date
        strStartDate: String
        strEndDate: String

}

type AddContractPayload {
    cmsContractVo: CmsContractVo
}


input AddEmployeeInput{
    employeeName: String!
    designation: String!
    joiningDate: Date!
    jobEndDate: Date
    resignationDate: Date
    resignationAcceptanceDate: Date
    aadharNo: String
    panNo: String
    passportNo: String
    primaryContactNo: String
    secondaryContactNo: String
    employeeFatherName: String
    employeeMotherName: String
    primaryAddress: String
    secondaryAddress: String
    employeeAddress: String
    personalMailId: String
    officialMailId: String
    disability: Disability
    drivingLicenceNo: String
    drivingLicenceValidity: String
    gender: Gender
    typeOfEmployment: String
    managerId: Long
    status: Status
    maritalStatus: MaritalStatus
    branchId: Long!
    transportRouteId: Long!
}

type AddEmployeePayload {
    employee: Employee!
}

input UpdateEmployeeInput {
    id: Long!
    employeeName: String!
    designation: String!
    joiningDate: Date!
    jobEndDate: Date
    resignationDate: Date
    resignationAcceptanceDate: Date
    aadharNo: String
    panNo: String
    passportNo: String
    primaryContactNo: String
    secondaryContactNo: String
    employeeFatherName: String
    employeeMotherName: String
    primaryAddress: String
    secondaryAddress: String
    employeeAddress: String
    personalMailId: String
    officialMailId: String
    disability: Disability
    drivingLicenceNo: String
    drivingLicenceValidity: String
    gender: Gender
    typeOfEmployment: String
    managerId: Long
    status: Status
    maritalStatus: MaritalStatus
     branchId: Long!
      transportRouteId: Long!
}

type UpdateEmployeePayload {
    employee: Employee!
}

input RemoveEmployeeInput {
    employeeId: Long!
}
type RemoveEmployeePayload {
    employees: [ Employee!]!
}

input AddCompetitiveExamInput{
    testName: String!
    testScore: Int!
    enrollmentNo: Long!
    rank: Long!
    studentId: Long!
}

type AddCompetitiveExamPayload {
    competitiveExam: CompetitiveExam!
}
input UpdateCompetitiveExamInput {
    id: Long!
    studentId: Long!
    testName: String!
    testScore: Int!
    enrollmentNo: Long!
    rank: Long!
}

type UpdateCompetitiveExamPayload {
    competitiveExam: CompetitiveExam!
}
input RemoveCompetitiveExamInput {
   competitiveExamId: Long!
}
type RemoveCompetitiveExamPayload {
    competitiveExam: [ CompetitiveExam!]!
}

input AddTypeOfGradingInput{
    minMarks: Int
    maxMarks: Int
    grades: String
}

type AddTypeOfGradingPayload {
    typeOfGrading: TypeOfGrading!
}
input UpdateTypeOfGradingInput {
    id: Long!
    minMarks: Int!
    maxMarks: Int!
    grades: String!
    groupvalue: Long!
}

type UpdateTypeOfGradingPayload {
    typeOfGrading: TypeOfGrading!
}
input RemoveTypeOfGradingInput {
   typeOfGradingId: Long!
}
type RemoveTypeOfGradingPayload {
    typeOfGradings: [ TypeOfGrading!]!
}

input AddAcademicExamSettingInput{
    examName: String
    semester: SemesterEnum
    examDate: Date
    startTime: String
    endTime: String
    gradeType: GradeType
    total: Int
    passing: Int
    actions: String
    groupvalue: Long
    departmentId: Long
    sectionId: Long
    subjectId: Long
    academicyearId: Long
    batchId: Long
    branchId: Long
    typeOfGradingId: Long
}

type AddAcademicExamSettingPayload {
    academicExamSetting: AcademicExamSetting!
}
input UpdateAcademicExamSettingInput {
    id: Long!
    examName: String!
    semester: SemesterEnum!
    examDate: Date!
    startTime: String!
    endTime: String!
    gradeType: GradeType!
    total: Int!
    passing: Int!
    actions: String!
    groupvalue: Long!
    departmentId: Long!
    sectionId: Long!
    subjectId: Long!
    academicyearId: Long!
    batchId: Long!
    branchId: Long!
    typeOfGradingId: Long!
    countvalue: Long!
}

type UpdateAcademicExamSettingPayload {
    academicExamSetting: AcademicExamSetting!
}
input RemoveAcademicExamSettingInput {
   academicExamSettingId: Long!
}
type RemoveAcademicExamSettingPayload {
    academicExamSettings: [ AcademicExamSetting!]!
}

input LectureScheduleInput {
	values: [String]!
}

input LectureScheduleFilter {
	academicYear: String
	branchId: Int
	departmentId: Int!
	batchId: Int
	semesterId: Int
	sectionId: Int
	status: String
	termId: Int!
}

type QueryResult{
	statusCode: Int!
	statusDesc: String!
}

input StudentAttendanceUpdateFilter {
	studentIds: String!
	lectureId: String!
}

input AcademicExamSettingUpdateFilter{
    subjectIds: String!
}
input AddAuthorizedSignatoryInput {
    signatoryName: String!
    signatoryFatherName: String!
    signatoryDesignation: String!
    address1: String!
    address2: String!
    address3: String!
    address4: String!
    address5: String!
    email: String!
    panCardNumber: String!
    branchId: Long!
    collegeId: Long!
}
type AddAuthorizedSignatoryPayload {
    authorizedSignatory: AuthorizedSignatory!
}
input UpdateAuthorizedSignatoryInput {
    id: Long!
    signatoryName: String!
    signatoryFatherName: String!
    signatoryDesignation: String!
    address1: String!
    address2: String!
    address3: String!
    address4: String!
    address5: String!
    email: String!
    panCardNumber: String!
    branchId: Long!
    collegeId: Long!
}
type UpdateAuthorizedSignatoryPayload {
    authorizedSignatory: AuthorizedSignatory!
}
input RemoveAuthorizedSignatoryInput {
   authorizedSignatoryId: Long!
}
type RemoveAuthorizedSignatoryPayload {
    authorizedSignatories: [ AuthorizedSignatory!]!
}

input AddStudentExamReportInput{
        marksObtained: Int!
        comments: String!
        gOp: Int!
        studentId: Long!
        academicExamSettingId: Long!
        typeOfGradingId: Long!
        academicyearId: Long!
        batchId: Long!
        departmentId:Long!
        sectionId:Long!
        subjectId:Long!
}

type AddStudentExamReportPayload {
    studentExamReport: StudentExamReport!
}
input UpdateStudentExamReportInput {
    id: Long!
    marksObtained: Int!
    comments: String!
    gOp: Int!
    studentId: Long!
    academicExamSettingId: Long!
    typeOfGradingId: Long!
    academicyearId: Long!
    batchId: Long!
    departmentId:Long!
    sectionId:Long!
    subjectId:Long!
}

type UpdateStudentExamReportPayload {
    studentExamReport: StudentExamReport!
}
input RemoveStudentExamReportInput {
   studentExamReportId: Long!
}
type RemoveStudentExamReportPayload {
    studentExamReports: [ StudentExamReport!]!
}

input AddBankAccountsInput {
   nameOfBank: NameOfBank!
   accountNumber: String!
   typeOfAccount: String!
   ifscCode: String!
   branchAddress: String!
   corporateId: String!
   branchId: Long
   collegeId: Long!
}
type AddBankAccountsPayload {
    bankAccounts: BankAccounts!
}
input UpdateBankAccountsInput {
   id: Long!
   nameOfBank: NameOfBank!
   accountNumber: String!
   typeOfAccount: String!
   ifscCode: String!
   branchAddress: String!
   corporateId: String!
   branchId: Long
   collegeId: Long
}
type UpdateBankAccountsPayload {
    bankAccounts: BankAccounts!
}
input RemoveBankAccountsInput {
    bankAccountsId: Long!
}
type RemoveBankAccountsPayload {
    bankAccounts: [BankAccounts!]!
}

input AddFeeCategoryInput {
     categoryName: String!
     description: String!
     status: Status
     createdBy: String
     createdOn: Date
     updatedBy: String
     updatedOn: Date
     startDate: Date
     endDate: Date
     branchId: Long
     strCreatedOn: String
     strUpdatedOn: String
     strStartDate: String
     strEndDate: String
}
type AddFeeCategoryPayload {
    feeCategory: FeeCategory!
}
input UpdateFeeCategoryInput {
     id: Long!
     categoryName: String!
     description: String!
     status: Status
     createdBy: String
     createdOn: Date
     updatedBy: String
     updatedOn: Date
     startDate: Date
     endDate: Date
     branchId: Long
     strCreatedOn: String
     strUpdatedOn: String
     strStartDate: String
     strEndDate: String
}
type UpdateFeeCategoryPayload {
    feeCategory: FeeCategory!
}
input RemoveFeeCategoryInput {
    feeCategoryId: Long!
}
type RemoveFeeCategoryPayload {
    feeCategories: [ FeeCategory!]!
}

input AddAdmissionPersonalDetailsInput {
           studentName: String!
           studentMiddleName: String!
           studentLastName: String!
           fatherName: String!
           fatherMiddleName: String!
           fatherLastName: String!
           motherName: String!
           motherMiddleName: String!
           motherLastName: String!
           contactNumber: String!
           alternateMobileNumber: String!
           dateOfBirth: Date!
           email: String!
           sex: Gender!
           countryId: Long
}
type AddAdmissionPersonalDetailsPayload {
    admissionApplication: AdmissionApplication!
}
input UpdateAdmissionPersonalDetailsInput {
      id: Long!
      studentName: String!
      studentMiddleName: String!
      studentLastName: String!
      fatherName: String!
      fatherMiddleName: String!
      fatherLastName: String!
      motherName: String!
      motherMiddleName: String!
      motherLastName: String!
      contactNumber: String!
      alternateMobileNumber: String!
      dateOfBirth: Date!
      email: String!
      sex: Gender!
      countryId: Long!
}
type UpdateAdmissionPersonalDetailsPayload {
    admissionApplication: AdmissionApplication!
}
input RemoveAdmissionPersonalDetailsInput {
    admissionApplicationId: Long!
}
type RemoveAdmissionPersonalDetailsPayload {
    admissionpersonaldetails: [AdmissionApplication!]!
}

input AddFeeDetailsInput {
     feeParticularsName: String!
   	 feeParticularDesc: String!
   	 studentType: StudentTypeEnum
   	 gender: Gender
   	 amount: Float
   	 status: Status
   	 createdBy: String
     createdOn: Date
     updatedBy: String
     updatedOn: Date
     startDate: Date
     endDate: Date
     feeCategoryId: Long
     batchId: Long
     facilityId: Long
     transportRouteId: Long
     departmentId: Long


}
type AddFeeDetailsPayload {
    feeDetails: FeeDetails!
}
input UpdateFeeDetailsInput {
     id: Long!
     feeParticularsName: String!
   	 feeParticularDesc: String!
   	 studentType: StudentTypeEnum
   	 gender: Gender
   	 amount: Long
   	 status: Status
   	 createdBy: String
     createdOn: Date
     updatedBy: String
     updatedOn: Date
     startDate: Date
     endDate: Date
     feeCategoryId: Long
     batchId: Long
     facilityId: Long
     transportRouteId: Long
     departmentId: Long
}
type UpdateFeeDetailsPayload {
   feeDetails: FeeDetails!
}
input RemoveFeeDetailsInput {
    feeDetailsId: Long!
}
type RemoveFeeDetailsPayload {
    feeDetails: [ FeeDetails!]!
}

input AddFacilityInput {
    name: String
    status: Status
    startDate: Date
    endDate: Date
    suspandStartDate: Date
    suspandEndDate: Date
    academicyearId: Long
    branchId: Long

}
type AddFacilityPayload {
    facility: Facility!
}
input UpdateFacilityInput {
     id: Long!
	 name: String
     status: Status
     startDate: Date
     endDate: Date
     suspandStartDate: Date
     suspandEndDate: Date
     academicyearId: Long
     branchId: Long
}
type UpdateFacilityPayload {
    facility: Facility!
}
input RemoveFacilityInput {
    facilityId: Long!
}
type RemoveFacilityPayload {
    facilities: [ Facility!]!
}

input AddTransportRouteInput {
      id:Long
     routeName: String
     routeDetails: String
     routeMapUrl: String
     noOfStops: Int
     routeFrequency: RouteFrequency
}
type AddTransportRoutePayload {
    cmsTransportVo: CmsTransportVo
}

input AddCollegeInput {
    shortName: String
    logoPath: String
    backgroundImagePath: String
    instructionInformation: String
}

type AddCollegePayload {
    college: College!
}
input UpdateCollegeInput {
    id: Long!
    shortName: String
    logoPath: String
    backgroundImagePath: String
    instructionInformation: String
}
type UpdateCollegePayload {
    college: College!
}
input RemoveCollegeInput {
    collegeId: Long!
}
type RemoveCollegePayload {
    colleges: [College!]!
}


input AddBranchInput {
    branchName: String!
    address1: String!
    address2: String!
    branchHead: String!
    collegeId: Long!
    cityId: Long!
    stateId: Long!
}
type AddBranchPayload {
    branch: Branch!
}
input UpdateBranchInput {
    id: Long!
    branchName: String!
    address1: String!
    address2: String!
    branchHead: String!
    collegeId: Long!
    cityId: Long!
    stateId: Long!
}
type UpdateBranchPayload {
    branch: Branch!
}
input RemoveBranchInput {
    branchId: Long!
}
type RemoveBranchPayload {
    branch: [Branch!]!
}

input AddAcademicHistoryInput {
    qualification: String!
    yearOfPassing: String!
    institution: String!
    university: String!
    enrollmentNo: Long!
    score: Long!
    percentage: Int!
    studentId: Long!

}
type AddAcademicHistoryPayload {
    academicHistory: AcademicHistory!
}
input UpdateAcademicHistoryInput {
    id: Long!
    qualification: String!
    yearOfPassing: String!
    institution: String!
    university: String!
    enrollmentNo: Long!
    score: Long!
    percentage: Int!
    studentId: Long!
}
type UpdateAcademicHistoryPayload {
    academicHistory: AcademicHistory!
}
input RemoveAcademicHistoryInput {
    academicHistoryId: Long!
}
type RemoveAcademicHistoryPayload {
    academicHistories: [AcademicHistory!]!
}


input AddAdmissionApplicationInput {
           admissionStatus: AdmissionStatusEnum
           studentName: String
           studentMiddleName: String
           studentLastName: String
           fatherName: String
           fatherMiddleName: String
           fatherLastName: String
           motherName: String
           motherMiddleName: String
           motherLastName: String
           contactNumber: String
           alternateMobileNumber: String
           dateOfBirth: Date
           email: String
           sex: Gender
           comments: String
           applicationId: Int
           uploadPhoto: String
           course:CourseEnum
           admissionDate: Date
           admissionEnquiryId: Long
           academicHistoryId: Long
           documentsId: Long
           branchId: Long
           batchId: Long
           stateId: Long
           cityId: Long
           countryId: Long
           departmentId: Long
           academicyearId: Long
           status: Status
}
type AddAdmissionApplicationPayload {
    admissionApplication: AdmissionApplication!
}
input UpdateAdmissionApplicationInput {
      id: Long
      admissionStatus: AdmissionStatusEnum
      studentName: String
      studentMiddleName: String
      studentLastName: String
      fatherName: String
      fatherMiddleName: String
      fatherLastName: String
      motherName: String
      motherMiddleName: String
      motherLastName: String
      contactNumber: String
      alternateMobileNumber: String
      dateOfBirth: Date
      email: String
      sex: Gender
      comments: String
      applicationId: Int
      uploadPhoto: String
      course:CourseEnum
      admissionDate: Date
      admissionEnquiryId: Long
      academicHistoryId: Long
      documentsId: Long
      branchId: Long
      batchId: Long
      stateId: Long
      cityId: Long
      countryId: Long
      departmentId: Long
      academicyearId: Long
      status: Status
}
type UpdateAdmissionApplicationPayload {
    admissionApplication: AdmissionApplication!
}
input RemoveAdmissionApplicationInput {
    admissionApplicationId: Long!
}
type RemoveAdmissionApplicationPayload {
    admissionApplications: [AdmissionApplication!]!
}


input AddAdmissionEnquiryInput {
          studentName: String!
          studentMiddleName: String!
          studentLastName: String!
          fatherName: String!
          fatherMiddleName: String!
          fatherLastName: String!
          motherName: String!
          motherMiddleName: String!
          motherLastName: String!
          contactNumber: String!
          alternateMobileNumber: String!
          dateOfBirth: Date!
          email: String!
          sex:  Gender!
          comments: String!
          courseApplyingFor: CourseEnum
          highestQualification: String!
          modeOfEnquiry: ModeOfEnquiry!
          status: EnquiryStatus!
          description: String!
          enquiryDate: Date!
          updatedOn: Date!
          updatedBy: String!
          branchId: Long!
          batchId: Long!
          stateId: Long!
          cityId: Long!
          countryId: Long!
          departmentId: Long!
}

type AddAdmissionEnquiryPayload {
    admissionEnquiry: AdmissionEnquiry!
}
input UpdateAdmissionEnquiryInput {
             id: Long!
             studentName: String!
             studentMiddleName: String!
             studentLastName: String!
             fatherName: String!
             fatherMiddleName: String!
             fatherLastName: String!
             motherName: String!
             motherMiddleName: String!
             motherLastName: String!
             contactNumber: String!
             alternateMobileNumber: String!
             dateOfBirth: Date!
             email: String!
             sex:  Gender!
             comments: String!
             courseApplyingFor: CourseEnum
             highestQualification: String!
             modeOfEnquiry: ModeOfEnquiry!
             status: EnquiryStatus!
             description: String!
             enquiryDate: Date!
             updatedOn: Date!
             updatedBy: String!
             branchId: Long!
             batchId: Long!
             stateId: Long!
             cityId: Long!
             countryId: Long!
             departmentId: Long!
}
type UpdateAdmissionEnquiryPayload {
    admissionEnquiry: AdmissionEnquiry!
}
input RemoveAdmissionEnquiryInput {
    admissionEnquiryId: Long!
}
type RemoveAdmissionEnquiryPayload {
    admissionEnquiries: [AdmissionEnquiry!]!
}

input AddBatchInput {
    batch: BatchEnum!
    departmentId: Long!
}
type AddBatchPayload {
    batch: Batch!
}
input UpdateBatchInput {
    id: Long!
    batch: BatchEnum!
    departmentId: Long!
}
type UpdateBatchPayload {
    batch: Batch!
}
input RemoveBatchInput {
    batchId: Long!
}
type RemoveBatchPayload {
    batch: [Batch!]!
}
type AdminAttendance{
    id: Long!
    updatedOn: Date!
    updatedBy: String!
    lecture: Lecture!
    branch: Branch!
    college: College!
    department: Department!
    academicyear: AcademicYear!
    section: Section!
    student: Student!
}

input AddAdminAttendanceInput {
    updatedOn: Date!
    updatedBy: String!
    lectureId: Long!
    branchId: Long!
    collegeId: Long!
    departmentId: Long!
    academicyearId: Long!
    sectionId: Long!
    studentId: Long!
}
type AddAdminAttendancePayload {
    adminAttendance: AdminAttendance!
}
input UpdateAdminAttendanceInput {
    id: Long!
    updatedOn: Date!
    updatedBy: String!
    lectureId: Long!
    branchId: Long!
    collegeId: Long!
    departmentId: Long!
    academicyearId: Long!
    sectionId: Long!
    studentId: Long!
}
type UpdateAdminAttendancePayload {
    adminAttendance: AdminAttendance!
}
input RemoveAdminAttendanceInput {
    adminAttendanceId: Long!
}
type RemoveAdminAttendancePayload {
    adminAttendance: [AdminAttendance!]!
}

input AddAcademicYearInput {
    year: String!
    startDate: Date!
    endDate: Date!
    status:Status!
}
type AddAcademicYearPayload {
    academicYear: AcademicYear!
}
input UpdateAcademicYearInput {
    id:Long!
    year: String!
    startDate: Date!
    endDate: Date!
    status:Status!
}
type UpdateAcademicYearPayload {
    academicYear: AcademicYear!
}
input RemoveAcademicYearInput {
    academicYearId: Long!
}
type RemoveAcademicYearPayload {
    academicYears: [AcademicYear!]!
}




type Department{
    id: Long!
    name: String!
    description: String!
    deptHead: String!
    branch: Branch!
    academicyear: AcademicYear!
}
input AddDepartmentInput {
    name: String!
    description: String!
    deptHead: String!
    branchId: Long!
    academicyearId: Long!
}
type AddDepartmentPayload {
    department: Department!
}
input UpdateDepartmentInput {
    id: Long!
    name: String
    description: String
    deptHead: String
    branchId: Long
    academicyearId: Long
}
type UpdateDepartmentPayload {
    department: Department!
}
input RemoveDepartmentInput {
    departmentId: Long!
}
type RemoveDepartmentPayload {
    department: [Department!]!
}



input AddTeachInput{
    desc: String!
    teacherId: Long!
    subjectId: Long!
}
type AddTeachPayload {
    teach: Teach!
}
input UpdateTeachInput {
    id: Long!
    desc: String
    teacherId: Long
    subjectId: Long
}
type UpdateTeachPayload {
    teach: Teach!
}
input RemoveTeachInput {
    teachId: Long!
}
type RemoveTeachPayload {
    teach: [Teach!]!
}



input AddAttendanceMasterInput{
    desc: String!
    teachId: Long!
    sectionId: Long!
    batchId: Long!
}
type AddAttendanceMasterPayload {
    attendanceMaster: AttendanceMaster!
}
input UpdateAttendanceMasterInput {
    id: Long!
    desc: String
    teachId: Long
    sectionId: Long
    batchId: Long
}
type UpdateAttendanceMasterPayload {
    attendanceMaster: AttendanceMaster!
}
input RemoveAttendanceMasterInput {
    attendanceMasterId: Long!
}
type RemoveAttendanceMasterPayload {
    attendanceMaster: [AttendanceMaster!]!
}



input AddLectureInput{
    lecDate: Date!
    lastUpdatedBy: String!
    lastUpdatedOn: Date!
    startTime: String!
    endTime: String!
	attendanceMasterId: Long!
}
type AddLecturePayload {
    lecture: Lecture!
}
input UpdateLectureInput {
    id: Long!
    lecDate: Date!
    lastUpdatedBy: String!
    lastUpdatedOn: Date!
    startTime: String!
    endTime: String!
	attendanceMasterId: Long!
}
type UpdateLecturePayload {
    lecture: Lecture!
}
input RemoveLectureInput {
    lectureId: Long!
}
type RemoveLecturePayload {
    lecture: [Lecture!]!
}


input AddHolidayInput {
    holidayDesc: String!
    holidayDate: Date!
    holidayStatus: Status!
    academicYearId: Long!
}
type AddHolidayPayload {
    holiday: Holiday!
}
input UpdateHolidayInput {
    id: Long!
    holidayDesc: String
    holidayDate: Date
    holidayStatus: Status
    academicYearId: Long
}
type UpdateHolidayPayload {
    holiday: Holiday!
}
input RemoveHolidayInput {
    holidayId: Long!
}
type RemoveHolidayPayload {
    holidays: [Holiday!]!
}


input AddLegalEntityInput {
    logoPath: String
    logoFileName: String
    logoFile: String
    legalNameOfTheCollege:String!
    typeOfCollege: TypeOfCollege!
    dateOfIncorporation:Date!
    registeredOfficeAddress1:String!
    registeredOfficeAddress2:String!
    registeredOfficeAddress3:String!
    registeredOfficeAddress4:String!
    registeredOfficeAddress5:String!
    collegeIdentificationNumber:String!
    pan:String!
    tan:String!
    tanCircleNumber:String!
    citTdsLocation:String!
    formSignatory:String!
    pfNumber:String!
    pfRegistrationDate: Date!
    pfSignatory: String!
    esiNumber:Long!
    esiRegistrationDate: Date!
    esiSignatory: String!
    ptNumber:Long!
    ptRegistrationDate:Date!
    ptSignatory:String!
    branchId: Long
    collegeId: Long!
    cityId: Long!
    stateId: Long!
}
type AddLegalEntityPayload {
    legalEntity: LegalEntity!
}
input UpdateLegalEntityInput {
    id: Long!
    logoPath: String
    logoFileName: String
    logoFile: String
    legalNameOfTheCollege:String!
    typeOfCollege: TypeOfCollege!
    dateOfIncorporation:Date!
    registeredOfficeAddress1:String!
    registeredOfficeAddress2:String!
    registeredOfficeAddress3:String!
    registeredOfficeAddress4:String!
    registeredOfficeAddress5:String!
    collegeIdentificationNumber:String!
    pan:String!
    tan:String!
    tanCircleNumber:String!
    citTdsLocation:String!
    formSignatory:String!
    pfNumber:String!
    pfRegistrationDate: Date!
    pfSignatory: String!
    esiNumber:Long!
    esiRegistrationDate: Date!
    esiSignatory: String!
    ptNumber:Long!
    ptRegistrationDate:Date!
    ptSignatory:String!
    branchId: Long
    collegeId: Long
    cityId: Long!
    stateId: Long!
}
type UpdateLegalEntityPayload {
    legalEntity: LegalEntity!
}
input RemoveLegalEntityInput {
    legalEntityId: Long!
}
type RemoveLegalEntityPayload {
    legalEntities: [LegalEntity!]!
}


input AddSectionInput {
   section: SectionEnum!
   batchId: Long!
}
type AddSectionPayload {
   section: Section!
}
input UpdateSectionInput {
   id: Long!
   section: SectionEnum
   batchId: Long
}
type UpdateSectionPayload {
   section: Section!
}
input RemoveSectionInput {
   sectionId: Long!
}
type RemoveSectionPayload {
   sections: [Section!]!
}



input StudentInput {
	    id: Long
    	studentName: String
    	studentMiddleName: String
    	studentLastName: String
    	fatherName: String
    	fatherMiddleName: String
    	fatherLastName: String
    	motherName: String
    	motherMiddleName: String
    	motherLastName: String
    	studentAadharNo: String
    	studentPanNo: String
    	studentSocialSecurityNo: String
    	studentTaxReferenceNo: String
    	studentBplNo: String
    	studentDrivingLicenseNo: String
    	studentPassportNo: String
    	dateOfBirth: Date
    	placeOfBirth: String
    	religion: Religion
    	caste: Caste
    	subCaste: String
    	age: Int
    	sex: Gender
    	studentLocalAddress: String
    	studentPermanentAddress: String
    	city: String
    	state: String
    	country: String
    	pinCode: String
    	studentPrimaryCellNumber: String
    	studentAlternateCellNumber: String
    	studentLandLinePhoneNumber: String
    	studentPrimaryEmailId: String
    	studentAlternateEmailId: String
    	relationWithStudent: RelationWithStudentEnum
    	emergencyContactName: String
    	emergencyContactMiddleName: String
    	emergencyContactLastName: String
    	emergencyContactCellNumber: String
    	emergencyContactLandLinePhoneNumber: String
    	emergencyContactEmailId: String
    	studentImagePath: String
    	admissionNo: String
    	enrollmentNo: String
    	rollNo: String
    	studentType: StudentTypeEnum
    	fatherCellNumber: String
    	fatherEmailId: String
    	fatherOccupation: String
    	fatherOfficeEmailId: String
    	fatherOfficeAddress: String
    	fatherOfficeCellNumber: String
    	fatherOfficeLandLinePhoneNumber: String
    	fatherAadharNo: String
    	fatherPanNo: String
    	fatherSocialSecurityNo: String
    	fatherTaxReferenceNo: String
    	fatherBplNo: String
    	fatherDrivingLicenseNo: String
    	fatherPassportNo: String
    	fatherImagePath: String
    	motherCellNumber: String
    	motherEmailId: String
    	motherOccupation: String
    	motherOfficeEmailId: String
    	motherOfficeAddress: String
    	motherOfficeCellNumber: String
    	motherOfficeLandLinePhoneNumber: String
    	motherAadharNo: String
    	motherPanNo: String
    	motherSocialSecurityNo: String
    	motherTaxReferenceNo: String
    	motherBplNo: String
    	motherDrivingLicenseNo: String
    	motherPassportNo: String
    	motherImagePath: String
    	guardianName: String
    	guardianMiddleName: String
    	guardianLastName: String
    	guardianAddress: String
    	guardianCellNumber: String
    	guardianLandLinePhoneNumber: String
    	guardianEmailId: String
    	guardianOccupation: String
    	guardianOfficeEmailId: String
    	guardianOfficeAddress: String
    	guardianOfficeCellNumber: String
    	guardianOfficeLandLinePhoneNumber: String
    	guardianImagePath: String
    	isGuardianSponsorAgency: String
    	sponsorAgencyName: String
    	sponsorAgencyRegistrationNo: String
    	sponsorAgencyAddress: String
    	sponsorAgencyCellNumber: String
    	sponsorAgencyLandLineNumber: String
    	sponsorAgencyEmailId: String
    	sponsorAgencyAppointeeName: String
    	sponsorAgencyAppointeeDesignation: String
    	sponsorAgencyAppointeeCellNumber: String
    	sponsorAgencyAppointeeLandLineNumber: String
    	sponsorAgencyAppointeeEmailId: String
    	sponsorAgencyAppointeeOfficeAddress: String
    	isPhysicallyChallenged: String
    	detailsOfDisability: String
    	disabilityCertificateNo: String
    	disabilityCertificateIssueAuthority: String
    	disabilityCertificateIssueDate: Date
    	percentagOfDisability: Int
    	bloodGroup: Bloodgroup
    	vaccinationDetails: String
    	otherMedicalDetails: String
    	status: Status
    	createdBy: String
    	createdOn: Date
    	updatedBy: String
    	updatedOn: Date
    	comments: String
    	departmentId: Long
    	batchId: Long
    	sectionId: Long
    	branchId: Long
    	strCreatedOn: String
    	strUpdatedOn: String
    	strDisabilityCertificateIssueDate: String
    	strDateOfBirth: String
}
type StudentPayload {
   cmsStudentVo: CmsStudentVo!
}

input AddStudentAttendanceInput {
  attendanceStatus: AttendanceStatusEnum!
  comments: String!
  studentId: Long!
  lectureId: Long!
}
type AddStudentAttendancePayload {
  studentAttendance: StudentAttendance!
}
input UpdateStudentAttendanceInput {
  id: Long!
  attendanceStatus: AttendanceStatusEnum!
  comments: String
  studentId: Long
  lectureId: Long
}
type UpdateStudentAttendancePayload {
  studentAttendance: StudentAttendance!
}
input RemoveStudentAttendanceInput {
   studentAttendanceId: Long!
}
type RemoveStudentAttendancePayload {
    studentAttendances: [StudentAttendance!]!
}



input AddSubjectInput {
   subjectType: SubTypeEnum!
   subjectCode: String!
   subjectDesc: String!
   status: Status!
   departmentId: Long!
   batchId: Long!
}
type AddSubjectPayload {
    subject: Subject!
}
input UpdateSubjectInput {
   id: Long!
   subjectType: SubTypeEnum!
   subjectCode: String!
   subjectDesc: String!
   status: Status!
   departmentId: Long!
   batchId: Long!
}
type UpdateSubjectPayload {
   subject: Subject!
}
input RemoveSubjectInput {
   subjectId: Long!
}
type RemoveSubjectPayload {
   subjects: [Subject!]!
}



input AddTeacherInput {
                   teacherName: String!
                   teacherMiddleName: String!
                   teacherLastName: String!
                   fatherName: String!
                   fatherMiddleName: String!
                   fatherLastName: String!
                   spouseName: String!
                   spouseMiddleName: String!
                   spouseLastName: String!
                   motherName: String!
                   motherMiddleName: String!
                   motherLastName: String!
                   aadharNo: Long!
                   dateOfBirth: Date!
                   placeOfBirth: String!
                   religion: Religion!
                   caste: Caste!
                   subCaste: String!
                   age: Long!
                   sex: Gender!
                   bloodGroup: Bloodgroup!
                   addressLineOne: String!
                   addressLineTwo: String!
                   addressLineThree: String!
                   town: String!
                   state: String!
                   country: String!
                   pincode: Long!
                   teacherContactNumber: String!
                   alternateContactNumber: String!
                   teacherEmailAddress: String!
                   alternateEmailAddress: String!
                   relationWithStaff: RelationWithStudentEnum!
                   emergencyContactName: String!
                   emergencyContactMiddleName: String!
                   emergencyContactLastName: String!
                   emergencyContactNo: String!
                   emergencyContactEmailAddress: String!
                   uploadPhoto: String!
                   employeeId: Long!
                   designation: String!
                   staffType: StaffType!
                   status: Status!
                   branchId: Long!
                  departmentId: Long!
}
type AddTeacherPayload {
    teacher: Teacher!
}
input UpdateTeacherInput {
                    id: Long!
                    teacherName: String!
                    teacherMiddleName: String!
                    teacherLastName: String!
                    fatherName: String!
                    fatherMiddleName: String!
                    fatherLastName: String!
                    spouseName: String!
                    spouseMiddleName: String!
                    spouseLastName: String!
                    motherName: String!
                    motherMiddleName: String!
                    motherLastName: String!
                    aadharNo: Long!
                    dateOfBirth: Date!
                    placeOfBirth: String!
                    religion: Religion!
                    caste: Caste!
                    subCaste: String!
                    age: Long!
                    sex: Gender!
                    bloodGroup: Bloodgroup!
                    addressLineOne: String!
                    addressLineTwo: String!
                    addressLineThree: String!
                    town: String!
                    state: String!
                    country: String!
                    pincode: Long!
                    teacherContactNumber: String!
                    alternateContactNumber: String!
                    teacherEmailAddress: String!
                    alternateEmailAddress: String!
                    relationWithStaff: RelationWithStudentEnum!
                    emergencyContactName: String!
                    emergencyContactMiddleName: String!
                    emergencyContactLastName: String!
                    emergencyContactNo: String!
                    emergencyContactEmailAddress: String!
                    uploadPhoto: String!
                    employeeId: Long!
                    designation: String!
                    staffType: StaffType!
                    status: Status!
                    branchId: Long!
                    departmentId: Long!
}
type UpdateTeacherPayload {
    teacher: Teacher!
}
input RemoveTeacherInput {
    teacherId: Long!
}
type RemoveTeacherPayload {
    teachers: [Teacher!]!
}



input AddTermInput {
   termsDesc: String!
   startDate: Date!
   endDate: Date!
   termStatus: Status!
   academicYearId: Long!
}
type AddTermPayload {
   term: Term!
}
input UpdateTermInput {
   id: Long!
   termsDesc: String!
   startDate: Date!
   endDate: Date!
   termStatus: Status!
   academicYearId: Long!
}
type UpdateTermPayload {
    term: Term!
}
input RemoveTermInput {
    termId: Long!
}
type RemoveTermPayload {
    terms: [Term!]!
}


input AddCityInput {
    cityName: String!
    cityCode: String!
    stdCode: String!
    stateId: Long!
}
type AddCityPayload {
    city: City!
}
input UpdateCityInput {
    id: Long!
    cityName: String!
    cityCode: String!
    stdCode: String!
    stateId: Long!
}
type UpdateCityPayload {
    city: City!
}
input RemoveCityInput {
    cityId: Long!
}
type RemoveCityPayload {
    cities: [ City!]!
}


input AddStateInput {
    stateName: String!
    divisionType: String!
    stateCode: String!
    countryId: Long!
}
type AddStatePayload {
    state: State!
}
input UpdateStateInput {
    id: Long!
    stateName: String!
    divisionType: String!
    stateCode: String!
    countryId: Long!
}
type UpdateStatePayload {
    state: State!
}
input RemoveStateInput {
    stateId: Long!
}
type RemoveStatePayload {
    states: [ State!]!
}


input AddCountryInput {
    countryName: String!
    countryCode: String!
    isdCode: String!
}
type AddCountryPayload {
    country: Country!
}
input UpdateCountryInput {
    id: Long!
    countryName: String!
    countryCode: String!
    isdCode: String!
}
type UpdateCountryPayload {
    country: Country!
}
input RemoveCountryInput {
    countryId: Long!
}
type RemoveCountryPayload {
    countries: [ Country!]!
}
input AddDueDateInput{
    paymentMethod: String!
    installments:Int
    dayDesc:String
    paymentDay:Int
    frequency:Frequency
    branchId:Long

}
type AddDueDatePayload{
    dueDate:DueDate!
}

input UpdateDueDateInput{
    id :Long!
    paymentMethod: String
    installments:Int
    dayDesc:String
    paymentDay:Int
    frequency:Frequency
    branchId:Long
}
type UpdateDueDatePayload{
    dueDate:DueDate!
}
input RemoveDueDateInput{
    dueDateId:Long!
}
type RemoveDueDatePayload{
    dueDates:[DueDate]!
}

input AddLateFeeInput{
    isAutoLateFee: String!
    lateFeeDays: Int
    chargeType: String
    fixedCharges: Long
    percentCharges: String
    lateFeeFrequency: String
	lateFeeRepeatDays: Int
    branchId: Long

}
type AddLateFeePayload{
    lateFee:LateFee!
}
input UpdateLateFeeInput{
    id :Long!
    isAutoLateFee: String!
    lateFeeDays: Int
    chargeType: String
    fixedCharges: Long
    percentCharges: String
    lateFeeFrequency: String
	lateFeeRepeatDays: Int
    branchId: Long

}
type UpdateLateFeePayload{
    lateFee:LateFee!

}
input RemoveLateFeeInput{
    lateFeeId:Long!
}
type RemoveLateFeePayload{
    lateFees:[LateFee]!

}
input AddPaymentRemainderInput{
    isAutoRemainder: String
    isFirstPaymentRemainder: String
    firstPaymentRemainderDays: Int
    isSecondPaymentRemainder: String
    secondPaymentRemainderDays: Int
    isOverDuePaymentRemainder: String
    overDuePaymentRemainderAfterDueDateOrUntilPaid: String
    overDuePaymentRemainderDays: Int
    isRemainderRecipients: String
    remainderRecipients: String
    branchId:Long
}
type AddPaymentRemainderPayload{
    paymentRemainder:PaymentRemainder!
}
input UpdatePaymentRemainderInput{
    id:Long!
    isAutoRemainder: String
    isFirstPaymentRemainder: String
    firstPaymentRemainderDays: Int
    isSecondPaymentRemainder: String
    secondPaymentRemainderDays: Int
    isOverDuePaymentRemainder: String
    overDuePaymentRemainderAfterDueDateOrUntilPaid: String
    overDuePaymentRemainderDays: Int
    isRemainderRecipients: String
    remainderRecipients: String
    branchId:Long
}
type UpdatePaymentRemainderPayload{
    paymentRemainder:PaymentRemainder!
}
input RemovePaymentRemainderInput{
    paymentRemainderId:Long!
}
type RemovePaymentRemainderPayload{
paymentRemainders:[PaymentRemainder]!
}

input AddInvoiceInput{
    invoiceNumber:String!
    amountPaid:Long!
    paymentDate:Date!
    nextPaymentDate:Date!
    outStandingAmount:Long!
    modeOfPayment:ModeOfPayment!
    chequeNumber:Long!
    demandDraftNumber:Long!
    onlineTxnRefNumber:String!
    paymentStatus:InvoicePaymentStatus!
    comments:String!
    updatedBy:String!
    updatedOn:Date!
    feeCategoryId:Long!
    feeDetailsId:Long!
    dueDateId:Long!
    paymentRemainderId:Long!
    collegeId:Long!
    branchId:Long!
    studentId:Long!
    academicyearId:Long!
}
type AddInvoicePayload{
    invoice:Invoice!
}
input UpdateInvoiceInput{
    id:Long!
    invoiceNumber:String!
    amountPaid:Long!
    paymentDate:Date!
    nextPaymentDate:Date!
    outStandingAmount:Long!
    modeOfPayment:ModeOfPayment!
    chequeNumber:Long!
    demandDraftNumber:Long!
    onlineTxnRefNumber:String!
    paymentStatus:InvoicePaymentStatus!
    comments:String!
    updatedBy:String!
    updatedOn:Date!
    feeCategoryId:Long!
    feeDetailsId:Long!
    dueDateId:Long!
    paymentRemainderId:Long!
    collegeId:Long!
    branchId:Long!
    studentId:Long!
    academicyearId:Long!

}
type UpdateInvoicePayload{
    invoice:Long!
}
input RemoveInvoiceInput{
    invoiceId:Long!
}
type RemoveInvoicePayload{
    invoices:[Invoice]!
}

input AddLibraryInput{
    bookTitle:String!
    author:String!
    bookNo:Long!
    noOfCopies:Long!
    additionalInfo:String!
     batchId:Long!
    subjectId:Long!
    uniqueNo: Long!
}
type AddLibraryPayload {
    library:Library!
}
input UpdateLibraryInput {
    id:Long!
    bookTitle:String!
    author:String!
    bookNo:Long!
    noOfCopies:Long!
    additionalInfo:String!
    uniqueNo:Long!
    batchId:Long!
    subjectId:Long!
}
type UpdateLibraryPayload{
    library:Library!
}
input RemoveLibraryInput {
    LibraryId:Long!
}
type RemoveLibraryPayload{
    libraries:[Library]!
}

input AddBookInput{
	libraryId:Long
	studentId:Long
    status: StatusEnum
    issueDate: Date
    dueDate: Date
    receivedDate: Date
    strIssueDate: String
    strDueDate: String
    strRecDate: String
    noOfCopiesAvailable: Int

}
type AddBookPayload{
    book:Book!
}
input UpdateBookInput {
    id:Long!
    issueDate:Date
	dueDate:Date
	noOfCopiesAvailable:Int
	status:StatusEnum
	studentId:Long
	libraryId:Long
	receivedDate: Date
}
type UpdateBookPayload{
    book:Book!
}
input RemoveBookInput {
    BookId:Long!
}
type RemoveBookPayload{
    books:[Book]!
}

 type Vehicle{
     id: Long
     vehicleNumber: String
     vehicleType: String
     capacity: Long
     ownerShip: String
     dateOfRegistration:Date
     yearOfManufacturing: String
      manufacturingCompany: String
      model:  String
      chasisNo:  String
      rcNo:  String
      contactNumber:  String
      status:Status
      employee: Employee
      transportRoute: TransportRoute
      insurance: Insurance
      contract: Contract
      branch: Branch
      college: College
  }


input AddVehicleInput{
      id:Long
     vehicleNumber: String
     vehicleType: String
     capacity: Long
     ownerShip: String
     yearOfManufacturing: String
     manufacturingCompany: String
      model: String
      chasisNo: String
      rcNo:  String
      contactNumber: String
      transportRouteId: Long
      insuranceId: Long
      status:Status
      strDateOfRegistration: String
}
type AddVehiclePayload{
    cmsVehicleVo:CmsVehicleVo
}


type Insurance{
  id: Long
  insuranceCompany: String
  typeOfInsurance: TypeOfInsurance
  dateOfInsurance: Date
  validTill: Date
}

input AddInsuranceInput{
           id: Long
         insuranceCompany: String
         typeOfInsurance: TypeOfInsurance
         strDateOfInsurance: String
         strValidTill: String
         dateOfInsurance:Date
         validTill:Date
}

type AddInsurancePayload{
    cmsInsuranceVo:CmsInsuranceVo
}
