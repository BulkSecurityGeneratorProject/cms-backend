scalar Date

enum Status {
    ACTIVE
    DEACTIVE
}

enum LecStatusEnum{
	ACTIVE
    DEACTIVE
    CANCELLED
}

enum AttendanceStatusEnum{
	PRESENT
    ABSENT
}

enum SectionEnum {
    A
    B
    C
    D
}

enum CommonSubEnum {
    MATHS
    PHYSICS
    CHEMISTRY
    DBMS
}

enum ElectiveEnum {
    JAVA
    C
}

enum TypeOfCollege{
    PRIVATE
    PUBLIC
}

enum NameOfBank {
    HDFC
    SBI
    ICICI
    ANDHRABANK
}

enum BatchEnum{
	FIRSTYEAR
    SECONDYEAR
    THIRDYEAR
    FOURTHYEAR
}

type Query {
  authorizedSignatory(id: Int!): AuthorizedSignatory!
  authorizedSignatories:[AuthorizedSignatory!]!
  
  bankAccount(id: Long!): BankAccounts!
  bankAccounts: [BankAccounts!]!
  
  college(id: Long!): College!
  colleges: [College!]!
  
  branch(id: Long!): Branch!
  branches: [Branch!]!
  
  batch(id: Long!): Batch!
  batches: [Batch!]!
  
  academicYear(id: Long!): AcademicYear!
  academicYears: [AcademicYear!]!
  department(id: Long!): Department!
  departments: [Department!]!
  
  teach(id: Long!): Teach!
  teaches: [Teach!]!
  
  courseOffer(id: Long!): CourseOffer!
  courseOffers: [CourseOffer!]!
  
  attendanceMaster(id: Long!): AttendanceMaster!
  attendanceMasters: [AttendanceMaster!]!
  
  lecture(id: Long!): Lecture!
  lectures: [Lecture!]!
  
  holiday(id: Long!): Holiday!
  holidays: [Holiday!]!
  
  legalEntity(id : Long!): LegalEntity!
  legalEntities: [LegalEntity!]!
}

type AuthorizedSignatory {
    id: Long!
    signatoryName: String!
    signatoryFatherName: String!
    signatoryDesignation: String!
    address: String!
    email: String!
    panCardNumber: String!
    legalEntity: LegalEntity!
}
type BankAccounts {
    id: Long!
    nameOfBank: NameOfBank!
    accountNumber: Long!
    typeOfAccount: String!
    ifsCode: String!
    branch: String!
    corporateId: Int!
}
type College{
    id: Long!
    shortName: String!
    logo: Long!
    backgroundImage: Long!
    instructionInformation: String!
}
type Branch{
    id: Long!
    branchName: String!
    description: String!
    collegeHead: String!
    college: College!
}
type Batch{
	id: Long!
    batch: String!
    department: Department!
}
type Teach{
	id: Long!
    desc: String!
    teacher: Teacher!
    subject: Subject!
}
type CourseOffer{
	id: Long!
    desc: String!
    college: College!
    department: Department!
    subject: Subject!
}
type AttendanceMaster{
	id: Long!
    desc: String!
    teach: Teach!
    section: Section!
    academicyear: AcademicYear!
}
type Lecture{
	id: Long!
	lecDate: Date!
	lastUpdatedOn: Date!
	lastUpdatedBy: String!
	lecStatus: String!
	desc: String!
	attendancemaster: AttendanceMaster!
}
type Holiday{
    id: Long!
    holidayDesc: String!
    holidayDate: Date!
    status: Status!
    academicYear: AcademicYear!
}
type LegalEntity{
    id: Long!
    logo: Long!
    legalNameOfTheCollege:String!
    typeOfCollege: TypeOfCollege!
    dateOfIncorporation:Date!
    registeredOfficeAddress:String!
    collegeIdentificationNumber:String!
    pan:String!
    tan:String!
    tanCircleNumber:String!
    citTdsLocation:String!
    formSignatory:String!
    pfNumber:String!
    registrationDate:Date!
    esiNumber:Long!
    ptRegistrationDate:Date!
    ptSignatory:String!
    ptNumber:Long!
}


type Mutation {
   addAuthorizedSignatory(input: AddAuthorizedSignatoryInput!): AddAuthorizedSignatoryPayload!
   updateAuthorizedSignatory(input: UpdateAuthorizedSignatoryInput!): UpdateAuthorizedSignatoryPayload!
   removeAuthorizedSignatory(input: RemoveAuthorizedSignatoryInput!): RemoveAuthorizedSignatoryPayload!
   
   addBankAccounts(input: AddBankAccountsInput!): AddBankAccountsPayload!
   updateBankAccounts(input: UpdateBankAccountsInput!): UpdateBankAccountsPayload!
   removeBankAccounts(input: RemoveBankAccountsInput!): RemoveBankAccountsPayload!
   
   addCollege(input: AddCollegeInput!): AddCollegePayload!
   updateCollege(input: UpdateCollegeInput!): UpdateCollegePayload!
   removeCollege(input: RemoveCollegeInput!): RemoveCollegePayload!
   
   addBranch(input: AddBranchInput!): AddBranchPayload!
   updateBranch(input: UpdateBranchInput!): UpdateBranchPayload!
   removeBranch(input: RemoveBranchInput!): RemoveBranchPayload!
   
   addBatch(input: AddBatchInput!): AddBatchPayload!
   updateBatch(input: UpdateBatchInput!): UpdateBatchPayload!
   removeBatch(input: RemoveBatchInput!): RemoveBatchPayload!
   
   addAcademicYear(input: AddAcademicYearInput!): AddAcademicYearPayload!
   updateAcademicYear(input: UpdateAcademicYearInput!): UpdateAcademicYearPayload!
   removeAcademicYear(input: RemoveAcademicYearInput!): RemoveAcademicYearPayload!
   
   addDepartment(input: AddDepartmentInput!): AddDepartmentPayload!
   updateDepartment(input: UpdateDepartmentInput!): UpdateDepartmentPayload!
   removeDepartment(input: RemoveDepartmentInput!): RemoveDepartmentPayload!
   
   addTeach(input: AddTeachInput!): AddTeachPayload!
   updateTeach(input: UpdateTeachInput!): UpdateTeachPayload!
   removeTeach(input: RemoveTeachInput!): RemoveTeachPayload!
   
   addCourseOffer(input: AddCourseOfferInput!): AddCourseOfferPayload!
   updateCourseOffer(input: UpdateCourseOfferInput!): UpdateCourseOfferPayload!
   removeCourseOffer(input: RemoveCourseOfferInput!): RemoveCourseOfferPayload!
   
   addAttendanceMaster(input: AddAttendanceMasterInput!): AddAttendanceMasterPayload!
   updateAttendanceMaster(input: UpdateAttendanceMasterInput!): UpdateAttendanceMasterPayload!
   removeAttendanceMaster(input: RemoveAttendanceMasterInput!): RemoveAttendanceMasterload!
   
   addLecture(input: AddLectureInput!): AddLecturePayload!
   updateLecture(input: UpdateLectureInput!): UpdateLecturePayload!
   removeLecture(input: RemoveLectureInput!): RemoveLecturePayload!
   
   addHoliday(input: AddHolidayInput!): AddHolidayPayload!
   updateHoliday(input: UpdateHolidayInput!): UpdateHolidayPayload!
   removeHoliday(input: RemoveHolidayInput!): RemoveHolidayPayload!
   
   addLegalEntity(input: AddLegalEntityInput!): AddLegalEntityPayload!
   updateLegalEntity(input: UpdateLegalEntityInput!): UpdateLegalEntityPayload!
   removeLegalEntity(input: RemoveLegalEntityInput!): RemoveLegalEntityPayload!
}

input AddAuthorizedSignatoryInput {
    signatoryName: String!
    signatoryFatherName: String!
    signatoryDesignation: String!
    address: String!
    email: String!
    panCardNumber: String!
    legalEntityId: Long!
}
type AddAuthorizedSignatoryPayload {
    authorizedSignatory: AuthorizedSignatory!
}
input UpdateAuthorizedSignatoryInput {
    id: Long!
    signatoryName: String!
    signatoryFatherName: String!
    signatoryDesignation: String!
    address: String!
    email: String!
    panCardNumber: String!
    legalEntityId: Long!
}
type UpdateAuthorizedSignatoryPayload {
    authorizedSignatory: AuthorizedSignatory!
}
input RemoveAuthorizedSignatoryInput {
   authorizedSignatoryId: Long!
}
type RemoveAuthorizedSignatoryPayload {
    authorizedSignatories: [ AuthorizedSignatory!]!
}

input AddBankAccountsInput {
   nameOfBank: NameOfBank!
   accountNumber: Long!
   typeOfAccount: String!
   ifsCode: String!
   branch: String!
   corporateId: Int!
}
type AddBankAccountsPayload {
    bankAccounts: BankAccounts!
}
input UpdateBankAccountsInput {
   id: Long!
   nameOfBank: NameOfBank!
   accountNumber: Long!
   typeOfAccount: String!
   ifsCode: String!
   branch: String!
   corporateId: Int!
}
type UpdateBankAccountsPayload {
    bankAccounts: BankAccounts!
}
input RemoveBankAccountsInput {
    bankAccountsId: Long!
}
type RemoveBankAccountsPayload {
    bankAccounts: [BankAccounts!]!
}

input AddCollegeInput {
    shortName: String
    logo: Long
    backgroundImage: Long
    instructionInformation: String
}
type AddCollegePayload {
    college: College!
}
input UpdateCollegeInput {
    id: Long!
    shortName: String
    logo: Long
    backgroundImage: Long
    instructionInformation: String
}
type UpdateCollegePayload {
    college: College!
}
input RemoveCollegeInput {
    collegeId: Long!
}
type RemoveCollegePayload {
    colleges: [College!]!
}


input AddBranchInput {
    branchName: String!
    description: String!
    collegeHead: String!
    collegeId: Long!
}
type AddBranchPayload {
    branch: Branch!
}
input UpdateBranchInput {
    id: Long!
    branchName: String!
    description: String!
    collegeHead: String!
    collegeId: Long!
}
type UpdateBranchPayload {
    branch: Branch!
}
input RemoveBranchInput {
    branchId: Long!
}
type RemoveBranchPayload {
    Branch: [Branch!]!
}

input AddBatchInput {
    id: Long!
    batch: String!
    departmentId: Long!
}
type AddBatchPayload {
    batch: Batch!
}
input UpdateBatchInput {
    id: Long!
    batch: String!
    departmentId: Long!
}
type UpdateBatchPayload {
    batch: Batch!
}
input RemoveBatchInput {
    batchId: Long!
}
type RemoveBatchPayload {
    batch: [Batch!]!
}

type AcademicYear{
    id: Long!
    year: Long!
    startDate: Date!
    endDate: Date!
    desc: String!
}
input AddAcademicYearInput {
    year: Long!
    startDate: Date!
    endDate: Date!
    desc: String!
}
type AddAcademicYearPayload {
    academicYear: AcademicYear!
}
input UpdateAcademicYearInput {
    id:Long!
    year: Long
    startDate: Date
    endDate: Date
    desc: String
}
type UpdateAcademicYearPayload {
    academicYear: AcademicYear!
}
input RemoveAcademicYearInput {
    academicYearId: Long!
}
type RemoveAcademicYearPayload {
    academicYears: [AcademicYear!]!
}

type Department{
    id: Long!
    name: String!
    description: String!
    deptHead: String!
    student: Student!
    college: College!
    academicyear: AcademicYear!
}
input AddDepartmentInput {
	name: String!
	description: String!
	deptHead: String!
	studentId: Long!
    collegeId: Long!
    academicyearId: Long!
}
type AddDepartmentPayload {
    department: Department!
}
input UpdateDepartmentInput {
    id: Long!
    name: String
    description: String
    deptHead: String
    studentId: Long
    collegeId: Long
    academicyearId: Long
}
type UpdateDepartmentPayload {
    department: Department!
}
input RemoveDepartmentInput {
    departmentId: Long!
}
type RemoveDepartmentPayload {
    department: [Department!]!
}


type AddTeachInput{
	id: Long!
    desc: String!
    teacher: Teacher!
    subject: Subject!
}
type AddTeachPayload {
    teach: Teach!
}
input UpdateTeachInput {
    id: Long!
    desc: String!
    teacher: Teacher!
    subject: Subject!
}
type UpdateTeachPayload {
    teach: Teach!
}
input RemoveTeachInput {
    teachId: Long!
}
type RemoveTeachPayload {
    teach: [Teach!]!
}

type AddCourseOfferInput{
	id: Long!
    desc: String!
    collegeId: Long!
    departmentId: Long!
    subjectId: Long!
}
type AddCourseOfferPayload {
    courseOffer: CourseOffer!
}
input UpdateCourseOfferInput {
    id: Long!
    desc: String!
    collegeId: Long!
    departmentId: Long!
    subjectId: Long!
}
type UpdateCourseOfferPayload {
    courseOffer: CourseOffer!
}
input RemoveCourseOfferInput {
    courseOfferId: Long!
}
type RemoveCourseOfferPayload {
    courseOffer: [CourseOffer!]!
}

type AddAttendanceMasterInput{
	id: Long!
    desc: String!
    teachId: Long!
    sectionId: Long!
    academicYearId: Long!
}
type AddAttendanceMasterPayload {
    attendanceMaster: AttendanceMaster!
}
input UpdateAttendanceMasterInput {
    id: Long!
    desc: String
    teachId: Long
    sectionId: Long
    academicYearId: Long
}
type UpdateAttendanceMasterPayload {
    attendanceMaster: AttendanceMaster!
}
input RemoveAttendanceMasterInput {
    attendanceMasterId: Long!
}
type RemoveAttendanceMasterPayload {
    attendanceMaster: [AttendanceMaster!]!
}

type AddLectureInput{
	id: Long!
	lecDate: Date!
	lastUpdatedOn: Date!
	lastUpdatedBy: String!
	lecStatus: String!
	desc: String!
	attendanceMasterId: Long!
}
type AddLecturePayload {
    lecture: Lecture!
}
input UpdateLectureInput {
    id: Long!
	lecDate: Date!
	lastUpdatedOn: Date!
	lastUpdatedBy: String!
	lecStatus: String!
	desc: String!
	attendanceMasterId: Long!
}
type UpdateLecturePayload {
    lecture: Lecture!
}
input RemoveLectureInput {
    lectureId: Long!
}
type RemoveLecturePayload {
    lecture: [Lecture!]!
}

input AddHolidayInput {
    holidayDesc: String!
    holidayDate: Date!
    status: Status!
    academicYearId: Long!
}
type AddHolidayPayload {
    holiday: Holiday!
}
input UpdateHolidayInput {
    id: Long!
    holidayDesc: String
    holidayDate: Date
    status: Status
    academicYearId: Long
}
type UpdateHolidayPayload {
    holiday: Holiday!
}
input RemoveHolidayInput {
    holidayId: Long!
}
type RemoveHolidayPayload {
    holidays: [Holiday!]!
}

input AddLegalEntityInput {
    logo: Long!
    legalNameOfTheCollege:String!
    typeOfCollege: TypeOfCollege!
    dateOfIncorporation:Date!
    registeredOfficeAddress:String!
    collegeIdentificationNumber:String!
    pan:String!
    tan:String!
    tanCircleNumber:String!
    citTdsLocation:String!
    formSignatory:String!
    pfNumber:String!
    registrationDate:Date!
    esiNumber:Long!
    ptRegistrationDate:Date!
    ptSignatory:String!
    ptNumber:Long!
}

type AddLegalEntityPayload {
    legalEntity: LegalEntity!
}
input UpdateLegalEntityInput {
    id: Long!
    logo: Long!
    legalNameOfTheCollege:String!
    typeOfCollege: TypeOfCollege!
    dateOfIncorporation:Date!
    registeredOfficeAddress:String!
    collegeIdentificationNumber:String!
    pan:String!
    tan:String!
    tanCircleNumber:String!
    citTdsLocation:String!
    formSignatory:String!
    pfNumber:String!
    registrationDate:Date!
    esiNumber:Long!
    ptRegistrationDate:Date!
    ptSignatory:String!
    ptNumber:Long!
}
type UpdateLegalEntityPayload {
    legalEntity: LegalEntity!
}
input RemoveLegalEntityInput {
    legalEntityId: Long!
}
type RemoveLegalEntityPayload {
    legalEntities: [LegalEntity!]!
}