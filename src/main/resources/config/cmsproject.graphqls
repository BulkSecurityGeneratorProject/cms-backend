scalar Date


enum Status {
    ACTIVE
    DEACTIVE
}

enum LecStatusEnum{
	ACTIVE
    DEACTIVE
    CANCELLED
}

enum AttendanceStatusEnum{
	PRESENT
    ABSENT
}

enum SectionEnum {
    A
    B
    C
    D
}

enum SubTypeEnum {
    COMMON
    ELECTIVE
}

enum AdmissionStatusEnum{
    RECEIVED
    INPROCESS
    DECLINED
    ACCEPTED
}

enum CourseEnum {
    BTECH
    MTECH
    BBA
    MBA
}

enum EnquiryStatus{
    RECEIVED
    FOLLOWUP
    DECLINED
    CONVERTED
}

enum ModeOfEnquiry{
    INPERSON
    TELEPHONE
    EMAIL
}


enum TypeOfCollege{
    PRIVATE
    PUBLIC
}

enum NameOfBank {
    HDFC
    SBI
    ICICI
    ANDHRABANK
}

enum BatchEnum{
	FIRSTYEAR
    SECONDYEAR
    THIRDYEAR
    FOURTHYEAR
}

enum StudentTypeEnum{
    REGULAR
    STAFF_CONCESSION
    BENEFITS
    SCHOLARSHIP
    OTHER_BENEFITS
}

enum Frequency {
    WEEKLY
    MONTHLY
    QUARTERLY
    HALFYEARLY
    ANNUALLY
}

enum ModeOfPayment {
    CARD
    CASH
    NETBANKING
    CHEQUE
    DEMANDDRAFT
}

enum InvoicePaymentStatus {
	PAID
	UNPAID
	CANCELED
}

type Query {

  authorizedSignatory(id: Int!): AuthorizedSignatory!
  authorizedSignatories:[AuthorizedSignatory!]!

  bankAccount(id: Long!): BankAccounts!
  bankAccounts: [BankAccounts!]!

  college(id: Long!): College!
  colleges: [College!]!

  branch(id: Long!): Branch!
  branches: [Branch!]!

  batch(id: Long!): Batch!
  batches: [Batch!]!

  academicYear(id: Long!): AcademicYear!
  academicYears: [AcademicYear!]!

  department(id: Long!): Department!
  departments: [Department!]!

  attendanceMaster(id: Long!): AttendanceMaster!
  attendanceMasters: [AttendanceMaster!]!

  lecture(id: Long!): Lecture!
  lectures: [Lecture!]!

  holiday(id: Long!): Holiday!
  holidays: [Holiday!]!

  section(id: Long!): Section!
  sections: [Section!]!

  student(id: Long!): Student!
  students: [Student!]!

  studentAttendance(id: Long!): StudentAttendance!
  studentAttendances: [StudentAttendance!]!

  subject(id: Long!): Subject!
  subjects: [Subject!]!

  academicHistory(id:Long!): AcademicHistory!
  academicHistories: [AcademicHistory!]!

  admissionApplication(id: Long!): AdmissionApplication!
  admissionApplications:[AdmissionApplication!]!

  admissionEnquiry(id: Long!): AdmissionEnquiry!
  admissionEnquiries:[AdmissionEnquiry!]!

  teach(id: Long!): Teach!
  teaches: [Teach!]!

  teacher(id: Long!): Teacher!
  teachers: [Teacher!]!

  feeCategory(id: Long!): FeeCategory!
  feeCategories: [FeeCategory!]!

  feeDetail(id: Long!): FeeDetails!
  feeDetails: [FeeDetails!]!

  facility(id: Long!): Facility!
  facilities: [Facility!]!

  competitiveExam (id: Long!): CompetitiveExam!
  competitiveExams: [CompetitiveExam!]!

  document (id: Long!): Documents!
  documents: [Documents!]!

  transportRoute(id: Long!): TransportRoute!
  transportRoutes: [TransportRoute!]!

    dueDate(id:Long!):DueDate!
    dueDates:[DueDate!]!

    lateFee(id:Long!):LateFee!
    lateFees:[LateFee!]!

    paymentRemainder(id:Long!):PaymentRemainder!
    paymentRemainders:[PaymentRemainder!]!

  term (id: Long!): Term!
  terms: [Term!]!

  city (id: Long!): City!
  cities: [City!]!

  state (id: Long!): Long!
  states: [State!]!

    country (id: Long!): Long!
    countries: [Country!]!
    invoice(id:Long!):Invoice!
    invoices:[Invoice!]!


    getDailyStudentAttendance(filter: StudentAttendanceFilterInput!): [DailyAttendanceVo!]!

  getAcademicSubjects(input: AcademicSubjectQueryPayload!): [Subject!]!

  searchInvoice(invoiceNumber:String, studentId:Long): [Invoice!]!
  getTotalInvoice(collegeId:Long, branchId:Long!, academicYearId:Long! ): Long!
  getTotalPaidInvoice(collegeId:Long, branchId:Long!, academicYearId:Long! ): Long!
  getTotalUnPaidInvoice(collegeId:Long, branchId:Long!, academicYearId:Long! ): Long!
  getTotalCanceledInvoice(collegeId:Long, branchId:Long!, academicYearId:Long! ): Long!
  getInvoiceData(collegeId:Long, branchId:Long!, academicYearId:Long!): InvoiceFilterProcessor!
}

type InvoiceFilterProcessor{
	totalInvoice: Long
	totalPaidInvoice: Long
	totalUnPaidInvoice: Long
	totalCanceledInvoice: Long
}

type City{
    id: Long!
    cityName: String!
    cityCode: String!
    stdCode: String!
    state: State!
}

type State{
    id: Long!
    stateName: String!
    divisionType: String!
    stateCode: String!
    country: Country!
}

type CompetitiveExam{
    id: Long!
    testName: String!
    testScore: Int!
    enrollmentNo: Long!
    rank: Long!
    student: Student!
 }

type Documents{
    id: Long!
    documentName: String!
    upload: String!
    student: Student!
 }

type FeeCategory{
    id: Long!
    categoryName: String!
    description: String!
   }

type Facility{
      id: Long!
    transport: Status!
    mess: Status!
    gym: Status!
    culturalClass: Status!
    library: Status!
    sports: Status!
    swimming: Status!
    extraClass: Status!
    handicrafts: Status!
     academicYear: AcademicYear!
     branch: Branch!
     student: Student!
 }

  type TransportRoute{
    id: Long!
    routeName: String!
    routeDetails: String!
    routeMapUrl: String!
  }

  type FeeDetails{
       id: Long!
       feeParticularsName: String!
       feeParticularDesc: String!
       studentType: StudentTypeEnum !
       gender: Gender!
       amount: Long!
       feeCategory: FeeCategory!
       batch: Batch!
       facility: Facility!
       transportRoute: TransportRoute!
       college: College!
       department: Department!
       branch: Branch!
       academicYear: AcademicYear!
      }

type Country{
    id: Long!
    countryName: String!
    countryCode: String!
    isdCode: String!
}
type DueDate{
    id:Long!
    paymentMethod: String!
    installments:Int!
    dayDesc:String!
    frequency:Frequency!
    college:College!
    branch:Branch!
}
type LateFee{
    id :Long!
    assignLateFee:Status!
    lateFeeDays:Int!
    fixed:Status!
    percentage:Status!
    fixedCharges:Long!
    percentCharges:Long!
    lateFeeAssignmentFrequency:Frequency!
    college:College!
    branch:Branch!

}
type PaymentRemainder{
    id:Long!
    feeRemainder: Status!
    noticeDay:Int!
    overDueRemainder:Status!
    remainderRecipients:String!
    dueDate:DueDate!
    college:College!
    branch:Branch!
}


type AuthorizedSignatory {
    id: Long!
    signatoryName: String!
    signatoryFatherName: String!
    signatoryDesignation: String!
    address1: String!
    address2: String!
    address3: String!
    address4: String!
    address5: String!
    email: String!
    panCardNumber: String!
    branch: Branch
    college: College!
}
type BankAccounts {
    id: Long!
    nameOfBank: NameOfBank!
    accountNumber: Long!
    typeOfAccount: String!
    ifscCode: String!
    branchAddress: String!
    corporateId: Int!
    branch: Branch
    college: College!
}
type College{
    id: Long!
    shortName: String!
    logo: Long!
    backgroundImage: Long!
    instructionInformation: String!
}
type Branch{
    id: Long!
    branchName: String!
    address1: String!
    address2: String
    branchHead: String!
    college: College!
    city: City!
    state: State!
}
type Batch{
	id: Long!
    batch: BatchEnum!
    department: Department!
}
type Teach{
	id: Long!
    desc: String!
    teacher: Teacher!
    subject: Subject!
}

type AttendanceMaster{
	id: Long!
    desc: String!
    teach: Teach!
    section: Section!
    batch: Batch!
}
type Lecture{
	id: Long!
	lecDate: Date!
    lastUpdatedBy: String!
    lastUpdatedOn: Date!
    startTime: String!
	endTime: String!
	attendancemaster: AttendanceMaster!
}
type Holiday{
    id: Long!
    holidayDesc: String!
    holidayDate: Date!
    holidayStatus: Status!
    academicyear: AcademicYear!
}
type AcademicYear{
    id: Long!
    year: String!
    startDate: Date!
    endDate: Date!
}

type AdmissionApplication{
     id: Long!
     admissionStatus: AdmissionStatusEnum!
     course:CourseEnum!
     date: Date!
     comments: String!
     student:Student!
}

type AcademicHistory{
    id:Long!
    qualification:String!
    yearOfPassing:String!
    institution:String!
    university:String!
    enrollmentNo:Long!
    score:Long!
    percentage:Int!
    student:Student!
}

type AdmissionEnquiry {
    id: Long!
    studentName: String!
    mobileNumber: String!
    alternateMobileNumber: String!
    email: String!
    courseApplyingFor: CourseEnum!
    modeOfEnquiry: ModeOfEnquiry!
    status: EnquiryStatus!
    description: String!
    enquiryDate: Date!
    updatedOn: Date!
    updatedBy: String!
    branch: Branch!
    admissionApplication: AdmissionApplication!
}

type LegalEntity{
    id: Long!
    logo: Long!
    legalNameOfTheCollege:String!
    typeOfCollege: TypeOfCollege!
    dateOfIncorporation:Date!
    registeredOfficeAddress1:String!
    registeredOfficeAddress2:String!
    registeredOfficeAddress3:String!
    registeredOfficeAddress4:String!
    registeredOfficeAddress5:String!
    collegeIdentificationNumber:String!
    pan:String!
    tan:String!
    tanCircleNumber:String!
    citTdsLocation:String!
    formSignatory:String!
    pfNumber:String!
    pfRegistrationDate: Date!
    pfSignatory: String!
    esiNumber:Long!
    esiRegistrationDate: Date!
    esiSignatory: String!
    ptNumber:Long!
    ptRegistrationDate:Date!
    ptSignatory:String!
    branch: Branch
    college: College!
    city: City!
    state: State!
}

type Section{
    id: Long!
    section: SectionEnum!
    batch: Batch!
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum Bloodgroup {
    ABPOSITIVE
    ABNEGATIVE
    OPOSITIVE
    BPOSITIVE
    BNEGATIVE
}

enum Caste {
    OC
    BC
    SC
    ST
}

 enum RelationWithStudentEnum {
    FATHER
    MOTHER
    GUARDIAN
}

enum Religion {
    HINDU
    MUSLIM
    CHRISTIAN
}


type Student {
       id: Long!
       studentName: String!
       studentMiddleName: String!
       studentLastName: String!
       fatherName: String!
       fatherMiddleName: String!
       fatherLastName: String!
       motherName: String!
       motherMiddleName: String!
       motherLastName: String!
       aadharNo: Long!
       dateOfBirth: Date!
       placeOfBirth: String!
       religion: Religion!
       caste: Caste!
       subCaste: String!
       age: Long!
       sex: Gender!
       bloodGroup: Bloodgroup!
       addressLineOne: String!
       addressLineTwo: String!
       addressLineThree: String!
       town: String!
       state: String!
       country: String!
       pincode: Long!
       studentContactNumber: String!
       alternateContactNumber: String!
       studentEmailAddress: String!
       alternateEmailAddress: String!
       relationWithStudent: RelationWithStudentEnum!
       emergencyContactName: String!
       emergencyContactMiddleName: String!
       emergencyContactLastName: String!
       emergencyContactNo: String!
       emergencyContactEmailAddress: String!
       uploadPhoto: String!
       admissionNo: Long!
       rollNo: String!
       studentType: StudentTypeEnum!
       batch: Batch!
       section: Section!
       branch: Branch!
       department: Department!
}
type StudentAttendance {
    id: Long!
    attendanceStatus: AttendanceStatusEnum!
    comments: String!
    student: Student!
    lecture: Lecture!
}
type Subject {
 	id: Long!
 	subjectType: SubTypeEnum!
 	subjectCode: String!
 	subjectDesc: String!
    status: Status!
 	department: Department!
 	batch: Batch!
}

enum StaffType {
    TEACHING
    NONTEACHING
     GUEST
}

type Teacher{
                 id: Long!
                 teacherName: String!
                 teacherMiddleName: String!
                 teacherLastName: String!
                 fatherName: String!
                 fatherMiddleName: String!
                 fatherLastName: String!
                 spouseName: String!
                 spouseMiddleName: String!
                  spouseLastName: String!
                 motherName: String!
                 motherMiddleName: String!
                 motherLastName: String!
                 aadharNo: Long!
                 dateOfBirth: Date!
                 placeOfBirth: String!
                 religion: Religion!
                 caste: Caste!
                 subCaste: String!
                 age: Long!
                 sex: Gender!
                 bloodGroup: Bloodgroup!
                 addressLineOne: String!
                 addressLineTwo: String!
                 addressLineThree: String!
                 town: String!
                 state: String!
                 country: String!
                 pincode: Long!
                 teacherContactNumber: String!
                 alternateContactNumber: String!
                 teacherEmailAddress: String!
                 alternateEmailAddress: String!
                 relationWithStaff: RelationWithStudentEnum!
                 emergencyContactName: String!
                 emergencyContactMiddleName: String!
                 emergencyContactLastName: String!
                 emergencyContactNo: String!
                 emergencyContactEmailAddress: String!
                 uploadPhoto: String!
                 employeeId: Long!
                 designation: String!
                 staffType: StaffType!
                 status: Status!
                 branch: Branch!
               department: Department!
}
type Term{
    id: Long!
    termsDesc: String!
    startDate: Date!
    endDate: Date!
    termStatus: Status!
    academicyear: AcademicYear!
}

type DailyAttendanceVo {
	studentId: String
	studentName: String
	currentDateStatus: String
	previousOneDayStatus: String
	previousTwoDayStatus: String
	previousThreeDayStatus: String
	comments: String
}



input StudentAttendanceFilterInput {
	branchId: String!
	departmentId: String!
	batchId: String!
	sectionId: String!
	subjectId: String!
	attendanceDate: String!
	studentId: String
	studentName: String
	lectureId: String!
}

type AcademicSubjectVo{
    subjectCode: String!
    subjectType: String!
    subjectDesc: String!
    status: String!
    id: Int!
	departmentId: Int!
	batchId: Int!
	teacherId: Int!
}

input AcademicSubjectMutationPayload {
    subjectData: [String!]!
}

input AcademicSubjectQueryPayload{
	departmentId: Int!
    batchId: Int!
    branchId: Int!
}
type Invoice {
    id : Long!
    invoiceNumber:String!
    amountPaid:Long!
    paymentDate:Date!
    nextPaymentDate:Date!
    outStandingAmount:Long!
    modeOfPayment:ModeOfPayment
    chequeNumber:Long!
    demandDraftNumber:Long!
    onlineTxnRefNumber:String!
    paymentStatus:InvoicePaymentStatus!
    comments:String!
    updatedBy:String!
    updatedOn:Date!
    feeCategory:FeeCategory!
    feeDetails:FeeDetails!
    dueDate:DueDate!
    paymentRemainder:PaymentRemainder!
    college:College!
    branch:Branch!
    student:Student!
    academicYear:AcademicYear!
}


type Mutation {
   addAuthorizedSignatory(input: AddAuthorizedSignatoryInput!): AddAuthorizedSignatoryPayload!
   updateAuthorizedSignatory(input: UpdateAuthorizedSignatoryInput!): UpdateAuthorizedSignatoryPayload!
   removeAuthorizedSignatory(input: RemoveAuthorizedSignatoryInput!): RemoveAuthorizedSignatoryPayload!

   addBankAccounts(input: AddBankAccountsInput!): AddBankAccountsPayload!
   updateBankAccounts(input: UpdateBankAccountsInput!): UpdateBankAccountsPayload!
   removeBankAccounts(input: RemoveBankAccountsInput!): RemoveBankAccountsPayload!

   addCollege(input: AddCollegeInput!): AddCollegePayload!
   updateCollege(input: UpdateCollegeInput!): UpdateCollegePayload!
   removeCollege(input: RemoveCollegeInput!): RemoveCollegePayload!

   addBranch(input: AddBranchInput!): AddBranchPayload!
   updateBranch(input: UpdateBranchInput!): UpdateBranchPayload!
   removeBranch(input: RemoveBranchInput!): RemoveBranchPayload!

   addBatch(input: AddBatchInput!): AddBatchPayload!
   updateBatch(input: UpdateBatchInput!): UpdateBatchPayload!
   removeBatch(input: RemoveBatchInput!): RemoveBatchPayload!

   addAcademicYear(input: AddAcademicYearInput!): AddAcademicYearPayload!
   updateAcademicYear(input: UpdateAcademicYearInput!): UpdateAcademicYearPayload!
   removeAcademicYear(input: RemoveAcademicYearInput!): RemoveAcademicYearPayload!

   addDepartment(input: AddDepartmentInput!): AddDepartmentPayload!
   updateDepartment(input: UpdateDepartmentInput!): UpdateDepartmentPayload!
   removeDepartment(input: RemoveDepartmentInput!): RemoveDepartmentPayload!

   addAttendanceMaster(input: AddAttendanceMasterInput!): AddAttendanceMasterPayload!
   updateAttendanceMaster(input: UpdateAttendanceMasterInput!): UpdateAttendanceMasterPayload!
   removeAttendanceMaster(input: RemoveAttendanceMasterInput!): RemoveAttendanceMasterPayload!

   addLecture(input: AddLectureInput!): AddLecturePayload!
   updateLecture(input: UpdateLectureInput!): UpdateLecturePayload!
   removeLecture(input: RemoveLectureInput!): RemoveLecturePayload!

   addHoliday(input: AddHolidayInput!): AddHolidayPayload!
   updateHoliday(input: UpdateHolidayInput!): UpdateHolidayPayload!
   removeHoliday(input: RemoveHolidayInput!): RemoveHolidayPayload!

   addLegalEntity(input: AddLegalEntityInput!): AddLegalEntityPayload!
   updateLegalEntity(input: UpdateLegalEntityInput!): UpdateLegalEntityPayload!
   removeLegalEntity(input: RemoveLegalEntityInput!): RemoveLegalEntityPayload!

   addSection(input: AddSectionInput!): AddSectionPayload!
   updateSection(input: UpdateSectionInput!): UpdateSectionPayload!
   removeSection(input: RemoveSectionInput!): RemoveSectionPayload!

   addStudent(input: AddStudentInput!): AddStudentPayload!
   updateStudent(input: UpdateStudentInput!): UpdateStudentPayload!
   removeStudent(input: RemoveStudentInput!): RemoveStudentPayload!

   addStudentAttendance(input: AddStudentAttendanceInput!): AddStudentAttendancePayload!
   updateStudentAttendance(input: UpdateStudentAttendanceInput!): UpdateStudentAttendancePayload!
   removeStudentAttendance(input: RemoveStudentAttendanceInput!): RemoveStudentAttendancePayload!

   addSubject(input: AddSubjectInput!): AddSubjectPayload!
   updateSubject(input: UpdateSubjectInput!): UpdateSubjectPayload!
   removeSubject(input: RemoveSubjectInput!): RemoveSubjectPayload!

   addTeach(input: AddTeachInput!): AddTeachPayload!
   updateTeach(input: UpdateTeachInput!): UpdateTeachPayload!
   removeTeach(input: RemoveTeachInput!): RemoveTeachPayload!

   addTeacher(input: AddTeacherInput!): AddTeacherPayload!
   updateTeacher(input: UpdateTeacherInput!): UpdateTeacherPayload!
   removeTeacher(input: RemoveTeacherInput!): RemoveTeacherPayload!

   addTerm(input: AddTermInput!): AddTermPayload!
   updateTerm(input: UpdateTermInput!): UpdateTermPayload!
   removeTerm(input: RemoveTermInput!): RemoveTermPayload!

   addCity(input: AddCityInput!): AddCityPayload!
   updateCity(input: UpdateCityInput!): UpdateCityPayload!
   removeCity(input: RemoveCityInput!): RemoveCityPayload!

   addState(input: AddStateInput!): AddStatePayload!
   updateState(input: UpdateStateInput!): UpdateStatePayload!
   removeState(input: RemoveStateInput!): RemoveStatePayload!

   addCountry(input: AddCountryInput!): AddCountryPayload!
   updateCountry(input: UpdateCountryInput!): UpdateCountryPayload!
   removeCountry(input: RemoveCountryInput!): RemoveCountryPayload!

   addFeeCategory(input: AddFeeCategoryInput!): AddFeeCategoryPayload!
   updateFeeCategory(input: UpdateFeeCategoryInput!): UpdateFeeCategoryPayload!
   removeFeeCategory(input: RemoveFeeCategoryInput!): RemoveFeeCategoryPayload!

   addFacility(input: AddFacilityInput!): AddFacilityPayload!
   updateFacility(input: UpdateFacilityInput!): UpdateFacilityPayload!
   removeFacility(input: RemoveFacilityInput!): RemoveFacilityPayload!

    addTransportRoute(input: AddTransportRouteInput!): AddTransportRoutePayload!
    updateTransportRoute(input: UpdateTransportRouteInput!): UpdateTransportRoutePayload!
    removeTransportRoute(input: RemoveTransportRouteInput!): RemoveTransportRoutePayload!

    addFeeDetails(input: AddFeeDetailsInput!): AddFeeDetailsPayload!
    updateFeeDetails(input: UpdateFeeDetailsInput!): UpdateFeeDetailsPayload!
    removeFeeDetails(input: RemoveFeeDetailsInput!): RemoveFeeDetailsPayload!

    updateStudenceAttendanceData(input: StudentAttendanceUpdateFilter!): QueryResult!

   addAcademicSubjects(input: AcademicSubjectMutationPayload!): QueryResult!
   updateAcademicSubjects(input: AcademicSubjectMutationPayload!): QueryResult!

   addLectures(input: LectureScheduleInput!, filter: LectureScheduleFilter!): QueryResult!
   updateLectures(input: LectureScheduleInput!, filter: LectureScheduleFilter!): QueryResult!

    addDueDate(input:AddDueDateInput!):AddDueDatePayload!
    updateDueDate(input:UpdateDueDateInput!):UpdateDueDatePayload!
    removeDueDate(input:RemoveDueDateInput!):RemoveDueDatePayload!

    addLateFee(input:AddLateFeeInput!):AddLateFeePayload!
    updateLateFee(input:UpdateLateFeeInput!):UpdateLateFeePayload!
    removeLateFee(input:RemoveLateFeeInput!):RemoveLateFeePayload!


    addPaymentRemainder(input:AddPaymentRemainderInput!):AddPaymentRemainderPayload!
    updatePaymentRemainder(input:UpdatePaymentRemainderInput!):UpdatePaymentRemainderPayload!
    removePaymentRemainder(input:RemovePaymentRemainderInput!):RemovePaymentRemainderPayload!

    addInvoice(input:AddInvoiceInput!):AddInvoicePayload!
    updateInvoice(input:UpdateInvoiceInput!):UpdateInvoicePayload!
    removeInvoice(input:RemoveInvoiceInput!):RemoveInvoicePayload!

    addCompetitiveExam(input:AddCompetitiveExamInput!):AddCompetitiveExamPayload!
    updateCompetitiveExam(input:UpdateCompetitiveExamInput!):UpdateCompetitiveExamPayload!
    removeCompetitiveExam(input:RemoveCompetitiveExamInput!):RemoveCompetitiveExamPayload!

    addDocuments(input:AddDocumentsInput!):AddDocumentsPayload!
    updateDocuments(input:UpdateDocumentsInput!):UpdateDocumentsPayload!
    removeDocuments(input:RemoveDocumentsInput!):RemoveDocumentsPayload!

    addAdmissionApplication(input: AddAdmissionApplicationInput!): AddAdmissionApplicationPayload!
    updateAdmissionApplication(input: UpdateAdmissionApplicationInput!): UpdateAdmissionApplicationPayload!
    removeAdmissionApplication(input: RemoveAdmissionApplicationInput!): RemoveAdmissionApplicationPayload!

    addAcademicHistory(input: AddAcademicHistoryInput!): AddAcademicHistoryPayload!
    updateAcademicHistory(input: UpdateAcademicHistoryInput!): UpdateAcademicHistoryPayload!
    removeAcademicHistory(input: RemoveAcademicHistoryInput!): RemoveAcademicHistoryPayload!

    addAdmissionEnquiry(input: AddAdmissionEnquiryInput!): AddAdmissionEnquiryPayload!
    updateAdmissionEnquiry(input: UpdateAdmissionEnquiryInput!): UpdateAdmissionEnquiryPayload!
    removeAdmissionEnquiry(input: RemoveAdmissionEnquiryInput!): RemoveAdmissionEnquiryPayload!


}

input AddDocumentsInput{
    documentName: String!
    upload: String!
    studentId: Long!
}

type AddDocumentsPayload {
    documents: Documents!
}
input UpdateDocumentsInput {
    id: Long!
    studentId: Long!
    documentName: String!
    upload: String!
}
type UpdateDocumentsPayload {
documents: Documents!
}
input RemoveDocumentsInput {
documentsId: Long!
}
type RemoveDocumentsPayload {
 documents: [ Documents!]!
}

input AddCompetitiveExamInput{
    testName: String!
    testScore: Int!
    enrollmentNo: Long!
    rank: Long!
    studentId: Long!
}

type AddCompetitiveExamPayload {
    competitiveExam: CompetitiveExam!
}
input UpdateCompetitiveExamInput {
    id: Long!
    studentId: Long!
    testName: String!
    testScore: Int!
    enrollmentNo: Long!
    rank: Long!
}

type UpdateCompetitiveExamPayload {
    competitiveExam: CompetitiveExam!
}
input RemoveCompetitiveExamInput {
   competitiveExamId: Long!
}
type RemoveCompetitiveExamPayload {
    competitiveExam: [ CompetitiveExam!]!
}

input LectureScheduleInput {
	values: [String]!
}

input LectureScheduleFilter {
	academicYear: String
	branchId: Int
	departmentId: Int!
	batchId: Int
	semesterId: Int
	sectionId: Int
	status: String
	termId: Int!
}

type QueryResult{
	statusCode: Int!
	statusDesc: String!
}

input StudentAttendanceUpdateFilter {
	studentIds: String!
	lectureId: Long!
}



input AddAuthorizedSignatoryInput {
    signatoryName: String!
    signatoryFatherName: String!
    signatoryDesignation: String!
    address1: String!
    address2: String!
    address3: String!
    address4: String!
    address5: String!
    email: String!
    panCardNumber: String!
    branchId: Long!
    collegeId: Long!
}
type AddAuthorizedSignatoryPayload {
    authorizedSignatory: AuthorizedSignatory!
}
input UpdateAuthorizedSignatoryInput {
    id: Long!
    signatoryName: String!
    signatoryFatherName: String!
    signatoryDesignation: String!
    address1: String!
    address2: String!
    address3: String!
    address4: String!
    address5: String!
    email: String!
    panCardNumber: String!
    branchId: Long!
    collegeId: Long!
}
type UpdateAuthorizedSignatoryPayload {
    authorizedSignatory: AuthorizedSignatory!
}
input RemoveAuthorizedSignatoryInput {
   authorizedSignatoryId: Long!
}
type RemoveAuthorizedSignatoryPayload {
    authorizedSignatories: [ AuthorizedSignatory!]!
}



input AddBankAccountsInput {
   nameOfBank: NameOfBank!
   accountNumber: Long!
   typeOfAccount: String!
   ifscCode: String!
   branchAddress: String!
   corporateId: Int!
   branchId: Long
   collegeId: Long!
}
type AddBankAccountsPayload {
    bankAccounts: BankAccounts!
}
input UpdateBankAccountsInput {
   id: Long!
   nameOfBank: NameOfBank!
   accountNumber: Long!
   typeOfAccount: String!
   ifscCode: String!
   branchAddress: String!
   corporateId: Int!
   branchId: Long
   collegeId: Long
}
type UpdateBankAccountsPayload {
    bankAccounts: BankAccounts!
}
input RemoveBankAccountsInput {
    bankAccountsId: Long!
}
type RemoveBankAccountsPayload {
    bankAccounts: [BankAccounts!]!
}

input AddFeeCategoryInput {
     categoryName: String!
     description: String!
}
type AddFeeCategoryPayload {
    feeCategory: FeeCategory!
}
input UpdateFeeCategoryInput {
    id: Long!
    categoryName: String!
    description: String!
}
type UpdateFeeCategoryPayload {
    feeCategory: FeeCategory!
}
input RemoveFeeCategoryInput {
    feeCategoryId: Long!
}
type RemoveFeeCategoryPayload {
    feeCategories: [ FeeCategory!]!
}

input AddFeeDetailsInput {
     feeParticularsName: String!
     feeParticularDesc: String!
     studentType: StudentTypeEnum !
     gender: Gender!
     amount: Long!
     feeCategoryId: Long!
     batchId: Long!
     facilityId: Long!
     transportRouteId: Long!
     collegeId: Long!
     departmentId: Long!
     branchId: Long!
     academicyearId: Long!
}
type AddFeeDetailsPayload {
    feeDetails: FeeDetails!
}
input UpdateFeeDetailsInput {
    id: Long!
    feeParticularsName: String!
    feeParticularDesc: String!
    studentType: StudentTypeEnum !
    gender: Gender!
    amount: Long!
    feeCategoryId: Long!
    batchId: Long!
    facilityId: Long!
    transportRouteId: Long!
    collegeId: Long!
    departmentId: Long!
    branchId: Long!
    academicyearId: Long!
}
type UpdateFeeDetailsPayload {
   feeDetails: FeeDetails!
}
input RemoveFeeDetailsInput {
    feeDetailsId: Long!
}
type RemoveFeeDetailsPayload {
    feeDetails: [ FeeDetails!]!
}

input AddFacilityInput {
    transport: Status!
    gym: Status!
    mess: Status!
    culturalClass: Status!
    library: Status!
    sports: Status!
    swimming: Status!
    extraClass: Status!
    handicrafts: Status!
    academicyearId: Long!
    branchId: Long!
    studentId: Long!
}
type AddFacilityPayload {
    facility: Facility!
}
input UpdateFacilityInput {
     id: Long!
    transport: Status!
    gym: Status!
    mess: Status!
    culturalClass: Status!
    library: Status!
    sports: Status!
    swimming: Status!
    extraClass: Status!
    handicrafts: Status!
     academicyearId: Long!
     branchId: Long!
     studentId: Long!
}
type UpdateFacilityPayload {
    facility: Facility!
}
input RemoveFacilityInput {
    facilityId: Long!
}
type RemoveFacilityPayload {
    facilities: [ Facility!]!
}

input AddTransportRouteInput {
     routeName: String!
     routeDetails: String!
     routeMapUrl: String!
}
type AddTransportRoutePayload {
    transportRoute: TransportRoute!
}
input UpdateTransportRouteInput {
    id: Long!
    routeName: String!
    routeDetails: String!
    routeMapUrl: String!
}
type UpdateTransportRoutePayload {
    transportRoute: TransportRoute!
}
input RemoveTransportRouteInput {
    transportRouteId: Long!
}
type RemoveTransportRoutePayload {
    transportRoutes: [ TransportRoute!]!
}


input AddCollegeInput {
    shortName: String
    logo: Long
    backgroundImage: Long
    instructionInformation: String
}

type AddCollegePayload {
    college: College!
}
input UpdateCollegeInput {
    id: Long!
    shortName: String
    logo: Long
    backgroundImage: Long
    instructionInformation: String
}
type UpdateCollegePayload {
    college: College!
}
input RemoveCollegeInput {
    collegeId: Long!
}
type RemoveCollegePayload {
    colleges: [College!]!
}


input AddBranchInput {
    branchName: String!
    address1: String!
    address2: String!
    branchHead: String!
    collegeId: Long!
    cityId: Long!
    stateId: Long!
}
type AddBranchPayload {
    branch: Branch!
}
input UpdateBranchInput {
    id: Long!
    branchName: String!
    address1: String!
    address2: String!
    branchHead: String!
    collegeId: Long!
    cityId: Long!
    stateId: Long!
}
type UpdateBranchPayload {
    branch: Branch!
}
input RemoveBranchInput {
    branchId: Long!
}
type RemoveBranchPayload {
    branch: [Branch!]!
}

input AddAcademicHistoryInput {
    qualification: String!
    yearOfPassing: String!
    institution: String!
    university: String!
    enrollmentNo: Long!
    score: Long!
    percentage: Int!
    studentId: Long!

}
type AddAcademicHistoryPayload {
    academicHistory: AcademicHistory!
}
input UpdateAcademicHistoryInput {
    id: Long!
    qualification: String!
    yearOfPassing: String!
    institution: String!
    university: String!
    enrollmentNo: Long!
    score: Long!
    percentage: Int!
    studentId: Long!
}
type UpdateAcademicHistoryPayload {
    academicHistory: AcademicHistory!
}
input RemoveAcademicHistoryInput {
    academicHistoryId: Long!
}
type RemoveAcademicHistoryPayload {
    academicHistories: [AcademicHistory!]!
}


input AddAdmissionApplicationInput {
        admissionStatus: AdmissionStatusEnum!
        course:CourseEnum!
        date: Date!
        comments: String!
        studentId: Long!
}
type AddAdmissionApplicationPayload {
    admissionApplication: AdmissionApplication!
}
input UpdateAdmissionApplicationInput {
    id: Long!
    admissionStatus: AdmissionStatusEnum!
    course:CourseEnum!
    date: Date!
    comments: String!
    studentId: Long!
}
type UpdateAdmissionApplicationPayload {
    admissionApplication: AdmissionApplication!
}
input RemoveAdmissionApplicationInput {
    admissionApplicationId: Long!
}
type RemoveAdmissionApplicationPayload {
    admissionApplications: [AdmissionApplication!]!
}


input AddAdmissionEnquiryInput {
        studentName: String!
        mobileNumber: String!
        alternateMobileNumber: String!
        email: String!
        courseApplyingFor: CourseEnum!
        modeOfEnquiry: ModeOfEnquiry!
        status: EnquiryStatus!
        description: String!
        enquiryDate: Date!
        updatedOn: Date!
        updatedBy: String!
        branchId: Long!
        admissionApplicationId: Long!
}

type AddAdmissionEnquiryPayload {
    admissionEnquiry: AdmissionEnquiry!
}
input UpdateAdmissionEnquiryInput {
    id: Long!
    studentName: String!
    mobileNumber: String!
    alternateMobileNumber: String
    email: String!
    courseApplyingFor: CourseEnum!
    modeOfEnquiry: ModeOfEnquiry!
    status: EnquiryStatus!
    description: String!
    enquiryDate: Date!
    updatedOn: Date!
    updatedBy: String!
    branchId: Long!
    admissionApplicationId: Long!
}
type UpdateAdmissionEnquiryPayload {
    admissionEnquiry: AdmissionEnquiry!
}
input RemoveAdmissionEnquiryInput {
    admissionEnquiryId: Long!
}
type RemoveAdmissionEnquiryPayload {
    admissionEnquiries: [AdmissionEnquiry!]!
}

input AddBatchInput {
    batch: BatchEnum!
    departmentId: Long!
}
type AddBatchPayload {
    batch: Batch!
}
input UpdateBatchInput {
    id: Long!
    batch: BatchEnum!
    departmentId: Long!
}
type UpdateBatchPayload {
    batch: Batch!
}
input RemoveBatchInput {
    batchId: Long!
}
type RemoveBatchPayload {
    batch: [Batch!]!
}



type AcademicYear{
    id: Long!
    year: String!
    startDate: Date!
    endDate: Date!
}
input AddAcademicYearInput {
    year: String!
    startDate: Date!
    endDate: Date!
}
type AddAcademicYearPayload {
    academicYear: AcademicYear!
}
input UpdateAcademicYearInput {
    id:Long!
    year: String!
    startDate: Date!
    endDate: Date!
}
type UpdateAcademicYearPayload {
    academicYear: AcademicYear!
}
input RemoveAcademicYearInput {
    academicYearId: Long!
}
type RemoveAcademicYearPayload {
    academicYears: [AcademicYear!]!
}



type Department{
    id: Long!
    name: String!
    description: String!
    deptHead: String!
    branch: Branch!
    academicyear: AcademicYear!
}
input AddDepartmentInput {
    name: String!
    description: String!
    deptHead: String!
    branchId: Long!
    academicyearId: Long!
}
type AddDepartmentPayload {
    department: Department!
}
input UpdateDepartmentInput {
    id: Long!
    name: String
    description: String
    deptHead: String
    branchId: Long
    academicyearId: Long
}
type UpdateDepartmentPayload {
    department: Department!
}
input RemoveDepartmentInput {
    departmentId: Long!
}
type RemoveDepartmentPayload {
    department: [Department!]!
}



input AddTeachInput{
    desc: String!
    teacherId: Long!
    subjectId: Long!
}
type AddTeachPayload {
    teach: Teach!
}
input UpdateTeachInput {
    id: Long!
    desc: String
    teacherId: Long
    subjectId: Long
}
type UpdateTeachPayload {
    teach: Teach!
}
input RemoveTeachInput {
    teachId: Long!
}
type RemoveTeachPayload {
    teach: [Teach!]!
}



input AddAttendanceMasterInput{
    desc: String!
    teachId: Long!
    sectionId: Long!
    batchId: Long!
}
type AddAttendanceMasterPayload {
    attendanceMaster: AttendanceMaster!
}
input UpdateAttendanceMasterInput {
    id: Long!
    desc: String
    teachId: Long
    sectionId: Long
    batchId: Long
}
type UpdateAttendanceMasterPayload {
    attendanceMaster: AttendanceMaster!
}
input RemoveAttendanceMasterInput {
    attendanceMasterId: Long!
}
type RemoveAttendanceMasterPayload {
    attendanceMaster: [AttendanceMaster!]!
}



input AddLectureInput{
    lecDate: Date!
    lastUpdatedBy: String!
    lastUpdatedOn: Date!
    startTime: String!
    endTime: String!
	attendanceMasterId: Long!
}
type AddLecturePayload {
    lecture: Lecture!
}
input UpdateLectureInput {
    id: Long!
    lecDate: Date!
    lastUpdatedBy: String!
    lastUpdatedOn: Date!
    startTime: String!
    endTime: String!
	attendanceMasterId: Long!
}
type UpdateLecturePayload {
    lecture: Lecture!
}
input RemoveLectureInput {
    lectureId: Long!
}
type RemoveLecturePayload {
    lecture: [Lecture!]!
}


input AddHolidayInput {
    holidayDesc: String!
    holidayDate: Date!
    holidayStatus: Status!
    academicYearId: Long!
}
type AddHolidayPayload {
    holiday: Holiday!
}
input UpdateHolidayInput {
    id: Long!
    holidayDesc: String
    holidayDate: Date
    holidayStatus: Status
    academicYearId: Long
}
type UpdateHolidayPayload {
    holiday: Holiday!
}
input RemoveHolidayInput {
    holidayId: Long!
}
type RemoveHolidayPayload {
    holidays: [Holiday!]!
}


input AddLegalEntityInput {
    logo: Long!
    legalNameOfTheCollege:String!
    typeOfCollege: TypeOfCollege!
    dateOfIncorporation:Date!
    registeredOfficeAddress1:String!
    registeredOfficeAddress2:String!
    registeredOfficeAddress3:String!
    registeredOfficeAddress4:String!
    registeredOfficeAddress5:String!
    collegeIdentificationNumber:String!
    pan:String!
    tan:String!
    tanCircleNumber:String!
    citTdsLocation:String!
    formSignatory:String!
    pfNumber:String!
    pfRegistrationDate: Date!
    pfSignatory: String!
    esiNumber:Long!
    esiRegistrationDate: Date!
    esiSignatory: String!
    ptNumber:Long!
    ptRegistrationDate:Date!
    ptSignatory:String!
    branchId: Long
    collegeId: Long!
    cityId: Long!
    stateId: Long!
}
type AddLegalEntityPayload {
    legalEntity: LegalEntity!
}
input UpdateLegalEntityInput {
    id: Long!
    logo: Long!
    legalNameOfTheCollege:String!
    typeOfCollege: TypeOfCollege!
    dateOfIncorporation:Date!
    registeredOfficeAddress1:String!
    registeredOfficeAddress2:String!
    registeredOfficeAddress3:String!
    registeredOfficeAddress4:String!
    registeredOfficeAddress5:String!
    collegeIdentificationNumber:String!
    pan:String!
    tan:String!
    tanCircleNumber:String!
    citTdsLocation:String!
    formSignatory:String!
    pfNumber:String!
    pfRegistrationDate: Date!
    pfSignatory: String!
    esiNumber:Long!
    esiRegistrationDate: Date!
    esiSignatory: String!
    ptNumber:Long!
    ptRegistrationDate:Date!
    ptSignatory:String!
    branchId: Long
    collegeId: Long
    cityId: Long!
    stateId: Long!
}
type UpdateLegalEntityPayload {
    legalEntity: LegalEntity!
}
input RemoveLegalEntityInput {
    legalEntityId: Long!
}
type RemoveLegalEntityPayload {
    legalEntities: [LegalEntity!]!
}


input AddSectionInput {
   section: SectionEnum!
   batchId: Long!
}
type AddSectionPayload {
   section: Section!
}
input UpdateSectionInput {
   id: Long!
   section: SectionEnum
   batchId: Long
}
type UpdateSectionPayload {
   section: Section!
}
input RemoveSectionInput {
   sectionId: Long!
}
type RemoveSectionPayload {
   sections: [Section!]!
}



input AddStudentInput {
  studentName: String!
         studentMiddleName: String!
         studentLastName: String!
         fatherName: String!
         fatherMiddleName: String!
         fatherLastName: String!
         motherName: String!
         motherMiddleName: String!
         motherLastName: String!
         aadharNo: Long!
         dateOfBirth: Date!
         placeOfBirth: String!
         religion: Religion!
         caste: Caste!
         subCaste: String!
         age: Long!
         sex: Gender!
         bloodGroup: Bloodgroup!
         addressLineOne: String!
         addressLineTwo: String!
         addressLineThree: String!
         town: String!
         state: String!
         country: String!
         pincode: Long!
         studentContactNumber: String!
         alternateContactNumber: String!
         studentEmailAddress: String!
         alternateEmailAddress: String!
         relationWithStudent: RelationWithStudentEnum!
         emergencyContactName: String!
         emergencyContactMiddleName: String!
         emergencyContactLastName: String!
         emergencyContactNo: String!
         emergencyContactEmailAddress: String!
         uploadPhoto: String!
         admissionNo: Long!
         rollNo: String!
         studentType: StudentTypeEnum !
         batchId: Long!
         sectionId: Long!
         branchId: Long!
         departmentId: Long!
}
type AddStudentPayload {
   student: Student!
}
input UpdateStudentInput {
             id: Long!
             studentName: String!
             studentMiddleName: String!
             studentLastName: String!
             fatherName: String!
             fatherMiddleName: String!
             fatherLastName: String!
             motherName: String!
             motherMiddleName: String!
             motherLastName: String!
             aadharNo: Long!
             dateOfBirth: Date!
             placeOfBirth: String!
             religion: Religion!
             caste: Caste!
             subCaste: String!
             age: Long!
             sex: Gender!
             bloodGroup: Bloodgroup!
             addressLineOne: String!
             addressLineTwo: String!
             addressLineThree: String!
             town: String!
             state: String!
             country: String!
             pincode: Long!
             studentContactNumber: String!
             alternateContactNumber: String!
             studentEmailAddress: String!
             alternateEmailAddress: String!
             relationWithStudent: RelationWithStudentEnum!
             emergencyContactName: String!
             emergencyContactMiddleName: String!
             emergencyContactLastName: String!
             emergencyContactNo: String!
             emergencyContactEmailAddress: String!
             uploadPhoto: String!
             admissionNo: Long!
             rollNo: String!
             studentType: StudentTypeEnum!
             batchId: Long
             sectionId: Long
             branchId: Long
             departmentId: Long
}
type UpdateStudentPayload {
   student: Student!
}
input RemoveStudentInput {
   studentId: Long!
}
type RemoveStudentPayload {
   students: [Student!]!
}


input AddStudentAttendanceInput {
  attendanceStatus: AttendanceStatusEnum!
  comments: String!
  studentId: Long!
  lectureId: Long!
}
type AddStudentAttendancePayload {
  studentAttendance: StudentAttendance!
}
input UpdateStudentAttendanceInput {
  id: Long!
  attendanceStatus: AttendanceStatusEnum!
  comments: String
  studentId: Long
  lectureId: Long
}
type UpdateStudentAttendancePayload {
  studentAttendance: StudentAttendance!
}
input RemoveStudentAttendanceInput {
   studentAttendanceId: Long!
}
type RemoveStudentAttendancePayload {
    studentAttendances: [StudentAttendance!]!
}



input AddSubjectInput {
   subjectType: SubTypeEnum!
   subjectCode: String!
   subjectDesc: String!
   status: Status!
   departmentId: Long!
   batchId: Long!
}
type AddSubjectPayload {
    subject: Subject!
}
input UpdateSubjectInput {
   id: Long!
   subjectType: SubTypeEnum!
   subjectCode: String!
   subjectDesc: String!
   status: Status!
   departmentId: Long!
   batchId: Long!
}
type UpdateSubjectPayload {
   subject: Subject!
}
input RemoveSubjectInput {
   subjectId: Long!
}
type RemoveSubjectPayload {
   subjects: [Subject!]!
}



input AddTeacherInput {
                   teacherName: String!
                   teacherMiddleName: String!
                   teacherLastName: String!
                   fatherName: String!
                   fatherMiddleName: String!
                   fatherLastName: String!
                   spouseName: String!
                   spouseMiddleName: String!
                   spouseLastName: String!
                   motherName: String!
                   motherMiddleName: String!
                   motherLastName: String!
                   aadharNo: Long!
                   dateOfBirth: Date!
                   placeOfBirth: String!
                   religion: Religion!
                   caste: Caste!
                   subCaste: String!
                   age: Long!
                   sex: Gender!
                   bloodGroup: Bloodgroup!
                   addressLineOne: String!
                   addressLineTwo: String!
                   addressLineThree: String!
                   town: String!
                   state: String!
                   country: String!
                   pincode: Long!
                   teacherContactNumber: String!
                   alternateContactNumber: String!
                   teacherEmailAddress: String!
                   alternateEmailAddress: String!
                   relationWithStaff: RelationWithStudentEnum!
                   emergencyContactName: String!
                   emergencyContactMiddleName: String!
                   emergencyContactLastName: String!
                   emergencyContactNo: String!
                   emergencyContactEmailAddress: String!
                   uploadPhoto: String!
                   employeeId: Long!
                   designation: String!
                   staffType: StaffType!
                   status: Status!
                   branchId: Long!
                  departmentId: Long!
}
type AddTeacherPayload {
    teacher: Teacher!
}
input UpdateTeacherInput {
                    id: Long!
                    teacherName: String!
                    teacherMiddleName: String!
                    teacherLastName: String!
                    fatherName: String!
                    fatherMiddleName: String!
                    fatherLastName: String!
                    spouseName: String!
                    spouseMiddleName: String!
                    spouseLastName: String!
                    motherName: String!
                    motherMiddleName: String!
                    motherLastName: String!
                    aadharNo: Long!
                    dateOfBirth: Date!
                    placeOfBirth: String!
                    religion: Religion!
                    caste: Caste!
                    subCaste: String!
                    age: Long!
                    sex: Gender!
                    bloodGroup: Bloodgroup!
                    addressLineOne: String!
                    addressLineTwo: String!
                    addressLineThree: String!
                    town: String!
                    state: String!
                    country: String!
                    pincode: Long!
                    teacherContactNumber: String!
                    alternateContactNumber: String!
                    teacherEmailAddress: String!
                    alternateEmailAddress: String!
                    relationWithStaff: RelationWithStudentEnum!
                    emergencyContactName: String!
                    emergencyContactMiddleName: String!
                    emergencyContactLastName: String!
                    emergencyContactNo: String!
                    emergencyContactEmailAddress: String!
                    uploadPhoto: String!
                    employeeId: Long!
                    designation: String!
                    staffType: StaffType!
                    status: Status!
                    branchId: Long!
                    departmentId: Long!
}
type UpdateTeacherPayload {
    teacher: Teacher!
}
input RemoveTeacherInput {
    teacherId: Long!
}
type RemoveTeacherPayload {
    teachers: [Teacher!]!
}



input AddTermInput {
   termsDesc: String!
   startDate: Date!
   endDate: Date!
   termStatus: Status!
   academicYearId: Long!
}
type AddTermPayload {
   term: Term!
}
input UpdateTermInput {
   id: Long!
   termsDesc: String!
   startDate: Date!
   endDate: Date!
   termStatus: Status!
   academicYearId: Long!
}
type UpdateTermPayload {
    term: Term!
}
input RemoveTermInput {
    termId: Long!
}
type RemoveTermPayload {
    terms: [Term!]!
}


input AddCityInput {
    cityName: String!
    cityCode: String!
    stdCode: String!
    stateId: Long!
}
type AddCityPayload {
    city: City!
}
input UpdateCityInput {
    id: Long!
    cityName: String!
    cityCode: String!
    stdCode: String!
    stateId: Long!
}
type UpdateCityPayload {
    city: City!
}
input RemoveCityInput {
    cityId: Long!
}
type RemoveCityPayload {
    cities: [ City!]!
}


input AddStateInput {
    stateName: String!
    divisionType: String!
    stateCode: String!
    countryId: Long!
}
type AddStatePayload {
    state: State!
}
input UpdateStateInput {
    id: Long!
    stateName: String!
    divisionType: String!
    stateCode: String!
    countryId: Long!
}
type UpdateStatePayload {
    state: State!
}
input RemoveStateInput {
    stateId: Long!
}
type RemoveStatePayload {
    states: [ State!]!
}


input AddCountryInput {
    countryName: String!
    countryCode: String!
    isdCode: String!
}
type AddCountryPayload {
    country: Country!
}
input UpdateCountryInput {
    id: Long!
    countryName: String!
    countryCode: String!
    isdCode: String!
}
type UpdateCountryPayload {
    country: Country!
}
input RemoveCountryInput {
    countryId: Long!
}
type RemoveCountryPayload {
    countries: [ Country!]!
}
input AddDueDateInput{
    paymentMethod: String!
    installments:Int!
    dayDesc:String!
    frequency:Frequency!
    collegeId:Long!
    branchId:Long!

}
type AddDueDatePayload{
    dueDate:DueDate!
}

input UpdateDueDateInput{
    id :Long!
    paymentMethod: String!
    installments:Int!
    dayDesc:String!
    frequency:Frequency!
    collegeId:Long!
    branchId:Long!
}
type UpdateDueDatePayload{
    dueDate:DueDate!
}
input RemoveDueDateInput{
    dueDateId:Long!
}
type RemoveDueDatePayload{
    dueDates:[DueDate]!
}
input AddLateFeeInput{
    assignLateFee:Status!
    lateFeeDays:Int!
    fixed:Status!
    percentage:Status!
    fixedCharges:Long!
    percentCharges:Long!
    lateFeeAssignmentFrequency:Frequency!
    collegeId:Long!
    branchId:Long!

}
type AddLateFeePayload{
    lateFee:LateFee!
}
input UpdateLateFeeInput{
    id :Long!
    assignLateFee:Status!
    lateFeeDays:Int!
    fixed:Status!
    percentage:Status!
    fixedCharges:Long!
    percentCharges:Long!
    lateFeeAssignmentFrequency:Frequency!
    collegeId:Long!
    branchId:Long!

}
type UpdateLateFeePayload{
    lateFee:LateFee!

}
input RemoveLateFeeInput{
    lateFeeId:Long!
}
type RemoveLateFeePayload{
    lateFees:[LateFee]!

}
input AddPaymentRemainderInput{
    feeRemainder: Status!
    noticeDay:Int!
    overDueRemainder:Status!
    remainderRecipients:String!
    dueDateId:Long!
    collegeId:Long!
    branchId:Long!
}
type AddPaymentRemainderPayload{
    paymentRemainder:PaymentRemainder!
}
input UpdatePaymentRemainderInput{
    id:Long!
    feeRemainder: Status!
    noticeDay:Int!
    overDueRemainder:Status!
    remainderRecipients:String!
    dueDateId:Long!
    collegeId:Long!
    branchId:Long!
}
type UpdatePaymentRemainderPayload{
    paymentRemainder:Long!
}
input RemovePaymentRemainderInput{
    paymentRemainderId:Long!
}
type RemovePaymentRemainderPayload{
paymentRemainders:[PaymentRemainder]!
}

input AddInvoiceInput{
    invoiceNumber:String!
    amountPaid:Long!
    paymentDate:Date!
    nextPaymentDate:Date!
    outStandingAmount:Long!
    modeOfPayment:ModeOfPayment!
    chequeNumber:Long!
    demandDraftNumber:Long!
    onlineTxnRefNumber:String!
    paymentStatus:InvoicePaymentStatus!
    comments:String!
    updatedBy:String!
    updatedOn:Date!
    feeCategoryId:Long!
    feeDetailsId:Long!
    dueDateId:Long!
    paymentRemainderId:Long!
    collegeId:Long!
    branchId:Long!
    studentId:Long!
    academicyearId:Long!
}
type AddInvoicePayload{
    invoice:Invoice!
}
input UpdateInvoiceInput{
    id:Long!
    invoiceNumber:String!
    amountPaid:Long!
    paymentDate:Date!
    nextPaymentDate:Date!
    outStandingAmount:Long!
    modeOfPayment:ModeOfPayment!
    chequeNumber:Long!
    demandDraftNumber:Long!
    onlineTxnRefNumber:String!
    paymentStatus:InvoicePaymentStatus!
    comments:String!
    updatedBy:String!
    updatedOn:Date!
    feeCategoryId:Long!
    feeDetailsId:Long!
    dueDateId:Long!
    paymentRemainderId:Long!
    collegeId:Long!
    branchId:Long!
    studentId:Long!
    academicyearId:Long!

}
type UpdateInvoicePayload{
    invoice:Long!
}
input RemoveInvoiceInput{
    invoiceId:Long!
}
type RemoveInvoicePayload{
    invoices:[Invoice]!
}

