scalar Date

type Query {
  college(id: Long!): College!
  colleges: [College!]!
  branch(id: Long!): Branch!
  branches: [Branch!]!
  academicYear(id: Long!): AcademicYear!
  academicYears: [AcademicYear!]!
  department(id: Long!): Department!
  departments: [Department!]!
}

type College{
    id: Long!
    shortName: String!
    logo: Long!
    backgroundImage: Long!
    instructionInformation: String!
}
type Branch{
    id: Long!
    branchName: String!
    description: String!
    collegeHead: String!
}
type Mutation {
   addCollege(input: AddCollegeInput!): AddCollegePayload!
   updateCollege(input: UpdateCollegeInput!): UpdateCollegePayload!
   removeCollege(input: RemoveCollegeInput!): RemoveCollegePayload!
   
   addBranch(input: AddBranchInput!): AddBranchPayload!
   updateBranch(input: UpdateBranchInput!): UpdateBranchPayload!
   removeBranch(input: RemoveBranchInput!): RemoveBranchPayload!
   
   addAcademicYear(input: AddAcademicYearInput!): AddAcademicYearPayload!
   updateAcademicYear(input: UpdateAcademicYearInput!): UpdateAcademicYearPayload!
   removeAcademicYear(input: RemoveAcademicYearInput!): RemoveAcademicYearPayload!
   
   addDepartment(input: AddDepartmentInput!): AddDepartmentPayload!
   updateDepartment(input: UpdateDepartmentInput!): UpdateDepartmentPayload!
   removeDepartment(input: RemoveDepartmentInput!): RemoveDepartmentPayload!
}

input AddCollegeInput {
    shortName: String
    logo: Long
    backgroundImage: Long
    instructionInformation: String
}
type AddCollegePayload {
    college: College!
}
input UpdateCollegeInput {
    id: Long!
    shortName: String
    logo: Long
    backgroundImage: Long
    instructionInformation: String
}
type UpdateCollegePayload {
    college: College!
}
input RemoveCollegeInput {
    collegeId: Long!
}
type RemoveCollegePayload {
    colleges: [College!]!
}


input AddBranchInput {
    branchName: String!
    description: String!
    collegeHead: String!
    collegeId: Long!
}
type AddBranchPayload {
    branch: Branch!
}
input UpdateBranchInput {
    id: Long!
    branchName: String!
    description: String!
    collegeHead: String!
    collegeId: Long!
}
type UpdateBranchPayload {
    branch: Branch!
}
input RemoveBranchInput {
    branchId: Long!
}
type RemoveBranchPayload {
    Branch: [Branch!]!
}

type AcademicYear{
    id: Long!
    year: Long!
    startDate: Date!
    endDate: Date!
    desc: String!
}
input AddAcademicYearInput {
    year: Long!
    startDate: Date!
    endDate: Date!
    desc: String!
}
type AddAcademicYearPayload {
    academicYear: AcademicYear!
}
input UpdateAcademicYearInput {
    id:Long!
    year: Long
    startDate: Date
    endDate: Date
    desc: String
}
type UpdateAcademicYearPayload {
    academicYear: AcademicYear!
}
input RemoveAcademicYearInput {
    academicYearId: Long!
}
type RemoveAcademicYearPayload {
    academicYears: [AcademicYear!]!
}

type Department{
    id: Long!
    name: String!
    description: String!
    deptHead: String!
}
input AddDepartmentInput {
	name: String!
	description: String!
	deptHead: String!
}
type AddDepartmentPayload {
    department: Department!
}
input UpdateDepartmentInput {
    id: Long!
    name: String
    description: String
    deptHead: String
}
type UpdateDepartmentPayload {
    department: Department!
}
input RemoveDepartmentInput {
    departmentId: Long!
}
type RemoveDepartmentPayload {
    department: [Department!]!
}
