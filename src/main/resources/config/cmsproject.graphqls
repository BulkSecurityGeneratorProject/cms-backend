scalar Date

type Query {
<<<<<<< HEAD
    location(id: Long!): Location!
    locations: [Location!]!
    legalEntity(id : Int!): LegalEntity!
    legalEntities: [LegalEntity!]!
    authorizedSignatory(id: Int!): AuthorizedSignatory!
}

enum TypeOfCollege{
    PRIVATE
    PUBLIC
}

type LegalEntity{
    id: Long!
    logo: Long!
    legalNameOfTheCollege:String!
    typeOfCollege: TypeOfCollege!
    dateOfIncorporation:Date!
    registeredOfficeAddress:String!
    collegeIdentificationNumber:String!
    pan:String!
    tan:String!
    tanCircleNumber:String!
    citTdsLocation:String!
    formSignatory:String!
    pfNumber:String!
    registrationDate:Date!
    esiNumber:Long!
    ptRegistrationDate:Date!
    ptSignatory:String!
    ptNumber:Long!
}

type AuthorizedSignatory {
    id: Long!
    signatoryName: String!
    signatoryFatherName: String!
    signatoryDesignation: String!
    address: String!
    email: String!
    panCardNumber: String!
    legalEntity: LegalEntity!
}

type Location{
    id: Long!
    name: String!
    address: String!
    appliesTo: String!
}


type Mutation {
    addLocation(input: AddLocationInput!): AddLocationPayload!
    updateLocation(input: UpdateLocationInput!): UpdateLocationPayload!
    removeLocation(input: RemoveLocationInput!): RemoveLocationPayload!
    addLegalEntity(input: AddLegalEntityInput!): AddLegalEntityPayload!
    updateLegalEntity(input: UpdateLegalEntityInput!): UpdateLegalEntityPayload!
    removeLegalEntity(input: RemoveLegalEntityInput!): RemoveLegalEntityPayload!
    addAuthorizedSignatory(input: AddAuthorizedSignatoryInput!): AddAuthorizedSignatoryPayload!
    updateAuthorizedSignatory(input: UpdateAuthorizedSignatoryInput!): UpdateAuthorizedSignatoryPayload!
    removeAuthorizedSignatory(input: RemoveAuthorizedSignatoryInput!): RemoveAuthorizedSignatoryPayload!
}


input AddLocationInput {
    name: String!
    address: String!
    appliesTo: String!
}

type AddLocationPayload {
    location: Location!
}

input UpdateLocationInput {
    id: Long!
    name: String!
    address: String!
    appliesTo: String!

}

type UpdateLocationPayload {
    location: Location!
}

input RemoveLocationInput {
    locationId: Long!
}
type RemoveLocationPayload {
    locations: [Location!]!
}

input AddLegalEntityInput {
    logo: Long!
    legalNameOfTheCollege:String!
    typeOfCollege: TypeOfCollege!
    dateOfIncorporation:Date!
    registeredOfficeAddress:String!
    collegeIdentificationNumber:String!
    pan:String!
    tan:String!
    tanCircleNumber:String!
    citTdsLocation:String!
    formSignatory:String!
    pfNumber:String!
    registrationDate:Date!
    esiNumber:Long!
    ptRegistrationDate:Date!
    ptSignatory:String!
    ptNumber:Long!
}

type AddLegalEntityPayload {
    legalEntity: LegalEntity!
}

input UpdateLegalEntityInput {
    id: Long!
    logo: Long!
    legalNameOfTheCollege:String!
    typeOfCollege: TypeOfCollege!
    dateOfIncorporation:Date!
    registeredOfficeAddress:String!
    collegeIdentificationNumber:String!
    pan:String!
    tan:String!
    tanCircleNumber:String!
    citTdsLocation:String!
    formSignatory:String!
    pfNumber:String!
    registrationDate:Date!
    esiNumber:Long!
    ptRegistrationDate:Date!
    ptSignatory:String!
    ptNumber:Long!

}

type UpdateLegalEntityPayload {
    legalEntity: LegalEntity!
}

input RemoveLegalEntityInput {
    legalEntityId: Long!
}
type RemoveLegalEntityPayload {
    legalEntities: [LegalEntity!]!
}

input AddAuthorizedSignatoryInput {
    signatoryName: String!
    signatoryFatherName: String!
    signatoryDesignation: String!
    address: String!
    email: String!
    panCardNumber: String!
    legalEntityId: Long!
}

type AddAuthorizedSignatoryPayload {
    authorizedSignatory: AuthorizedSignatory!
}

input UpdateAuthorizedSignatoryInput {
    id: Long!
    signatoryName: String!
    signatoryFatherName: String!
    signatoryDesignation: String!
    address: String!
    email: String!
    panCardNumber: String!
}

type UpdateAuthorizedSignatoryPayload {
    authorizedSignatory: AuthorizedSignatory!
}

input RemoveAuthorizedSignatoryInput {
    authorizedSignatoryId: Long!
}
type RemoveAuthorizedSignatoryPayload {
    authorizedSignatories: [ AuthorizedSignatory!]!
}
=======
  college(id: Long!): College!
  colleges: [College!]!
  branch(id: Long!): Branch!
  branches: [Branch!]!
}

type College{
    id: Long!
    shortName: String!
    logo: Long!
    backgroundImage: Long!
    instructionInformation: String!
}
type Branch{
    id: Long!
    branchName: String!
    description: String!
    collegeHead: String!
}
type Mutation {
   addCollege(input: AddCollegeInput!): AddCollegePayload!
   updateCollege(input: UpdateCollegeInput!): UpdateCollegePayload!
   removeCollege(input: RemoveCollegeInput!): RemoveCollegePayload!
   
   addBranch(input: AddBranchInput!): AddBranchPayload!
   updateBranch(input: UpdateBranchInput!): UpdateBranchPayload!
   removeBranch(input: RemoveBranchInput!): RemoveBranchPayload!
   
}

input AddCollegeInput {
    shortName: String
    logo: Long
    backgroundImage: Long
    instructionInformation: String
}
type AddCollegePayload {
    college: College!
}
input UpdateCollegeInput {
    id: Long!
    shortName: String
    logo: Long
    backgroundImage: Long
    instructionInformation: String
}
type UpdateCollegePayload {
    college: College!
}
input RemoveCollegeInput {
    collegeId: Long!
}
type RemoveCollegePayload {
    colleges: [College!]!
}


input AddBranchInput {
    branchName: String!
    description: String!
    collegeHead: String!
    collegeId: Long!
}
type AddBranchPayload {
    branch: Branch!
}
input UpdateBranchInput {
    id: Long!
    branchName: String!
    description: String!
    collegeHead: String!
    collegeId: Long!
}
type UpdateBranchPayload {
    branch: Branch!
}
input RemoveBranchInput {
    branchId: Long!
}
type RemoveBranchPayload {
    Branch: [Branch!]!
}

>>>>>>> c8d5b007289a6c93fd618448714fb1032fc459ba
